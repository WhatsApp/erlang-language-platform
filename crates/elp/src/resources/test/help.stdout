Usage: [--log-file LOG_FILE] [--erl ERL] [--escript ESCRIPT] [--no-log-buffering] [--no-buck-generated] [--buck-quick-start] [COMMAND ...]

Available options:
        --log-file <LOG_FILE>
        --erl <ERL>
        --escript <ESCRIPT>
        --no-log-buffering
        --no-buck-generated    When using buck, do not invoke a build step for generated files.
        --buck-quick-start     Use buck2 targets for first stage project loading
    -h, --help                 Prints help information

Available commands:
    eqwalize              Eqwalize specified module
    eqwalize-all          Eqwalize all opted-in modules in a project
    eqwalize-app          Eqwalize all opted-in modules in specified application
    eqwalize-target       Eqwalize all opted-in modules in specified buck target
    dialyze-all           Run Dialyzer on the whole project by shelling out to a `dialyzer-run` tool on the path to do the legwork.
    lint                  Parse files in project and emit diagnostics, optionally apply fixes.
    ssr                   Run SSR (Structural Search and Replace) pattern matching on project files.
    server                Run lsp server
    generate-completions  Generate shell completions
    parse-all             Dump ast for all files in a project for specified rebar.config file
    parse-elp             Tree-sitter parse all files in a project for specified rebar.config file
    build-info            Generate build info JSON file
    version               Print version
    shell                 Starts an interactive ELP shell
    eqwalize-stats        Return statistics about code quality for eqWAlizer
    explain               Explain a diagnostic code
    project-info          Generate project info file
    glean                 Glean indexer
    config                Dump a JSON config stanza suitable for use in VS Code project.json
