error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:16:22
   │
16 │ map_candidates(M) -> M.
   │                      ^
   │                      │
   │                      M.
Expression has type:   #{bar := atom(), baz := atom()}
Context expected type: foo_map() | #{foo => atom()}
   │                      

Because in the expression's type:
  #{ baz =>
    Here the type is:     atom()
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{bar := atom(), baz := atom()} is not compatible with foo_map() | #{foo => atom()}
  because
  #{bar := atom(), baz := atom()} is not compatible with foo_map()
  because
  #{bar := atom(), baz := atom()} is not compatible with #{bar => atom(), baz => number(), other => atom(), other2 => atom(), other3 => atom(), other4 => atom(), other5 => atom()}
  because
  at key `baz`:
  #{bar := atom(), baz := atom()} is not compatible with #{bar => atom(), baz => number(), other => atom(), other2 => atom(), other3 => atom(), other4 => atom(), other5 => atom()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:19:24
   │
19 │ map_candidates_2(M) -> M.
   │                        ^
   │                        │
   │                        M.
Expression has type:   [#{bar => 'a' | 'b'} | #{baz => 'a' | 'b'}]
Context expected type: [#{bar => 'a'}]
   │                        

Because in the expression's type:
  [
    Here the type is:     #{baz => ...}
    Context expects type: #{...}
    The expected map has no corresponding key for: baz.
  ]

------------------------------ Detailed message ------------------------------

  [#{bar => 'a' | 'b'} | #{baz => 'a' | 'b'}] is not compatible with [#{bar => 'a'}]
  because
  #{bar => 'a' | 'b'} | #{baz => 'a' | 'b'} is not compatible with #{bar => 'a'}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:22:22
   │
22 │ no_map_rewrite(M) -> M.
   │                      ^
   │                      │
   │                      M.
Expression has type:   #{'undefined' | binary() => atom()}
Context expected type: #{binary() => atom()}
   │                      

Because in the expression's type:
  #{ map domains are incompatible:
    Here the type is a union type with some valid candidates: binary()
    However the following candidate: 'undefined'
    Differs from the expected type:  binary()
  , ... }

------------------------------ Detailed message ------------------------------

  #{'undefined' | binary() => atom()} is not compatible with #{binary() => atom()}
  the default associations are not compatible
  because
  'undefined' | binary() is not compatible with binary()
  because
  'undefined' is not compatible with binary()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:27:32
   │
27 │ no_record_conversion_1(Foo) -> Foo.
   │                                ^^^ Foo.
Expression has type:   #foo{}
Context expected type: {'foobar', atom()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:30:32
   │
30 │ no_record_conversion_2(Foo) -> Foo.
   │                                ^^^
   │                                │
   │                                Foo.
Expression has type:   #foo{}
Context expected type: {binary(), atom(), atom()}
   │                                

  at tuple index 1:
  {'foo', atom(), atom()} is not compatible with {binary(), atom(), atom()}
  because
  'foo' is not compatible with binary()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/error_messages.erl:33:27
   │
33 │ record_conversion(Foo) -> Foo.
   │                           ^^^
   │                           │
   │                           Foo.
Expression has type:   #foo{}
Context expected type: {'foo', binary(), atom()}
   │                           

Because in the expression's type:
  { 'foo', 
    Here the type is:     atom()
    Context expects type: binary()
  , atom()}

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {'foo', atom(), atom()} is not compatible with {'foo', binary(), atom()}
  because
  atom() is not compatible with binary()

6 ERRORS
