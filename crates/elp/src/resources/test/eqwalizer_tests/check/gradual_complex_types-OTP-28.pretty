error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/gradual_complex_types.erl:24:3
   │
24 │   undefined.
   │   ^^^^^^^^^
   │   │
   │   'undefined'.
Expression has type:   'undefined'
Context expected type: complex_map()
   │   

Because in the expression's type:
  Here the type is:     'undefined'
  Context expects type: #{...}

------------------------------ Detailed message ------------------------------

  'undefined' is not compatible with complex_map()
  because
  'undefined' is not compatible with #{id := number(), {secret, id} => number(), atom() => term()}

error: reveal_type (See https://fb.me/eqwalizer_errors#reveal_type)
   ┌─ check/src/gradual_complex_types.erl:29:25
   │
29 │   eqwalizer:reveal_type(Map),
   │                         ^^^ complex_map()

error: reveal_type (See https://fb.me/eqwalizer_errors#reveal_type)
   ┌─ check/src/gradual_complex_types.erl:35:25
   │
35 │   eqwalizer:reveal_type(List),
   │                         ^^^^ [complex_map()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/gradual_complex_types.erl:48:16
   │
48 │   lists:nth(7, Map).
   │                ^^^
   │                │
   │                Map.
Expression has type:   complex_map()
Context expected type: [T]
   │                

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: [T]

------------------------------ Detailed message ------------------------------

  complex_map() is not compatible with [T]
  because
  #{id := number(), {secret, id} => number(), atom() => term()} is not compatible with [T]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/gradual_complex_types.erl:48:16
   │
48 │   lists:nth(7, Map).
   │                ^^^
   │                │
   │                Map.
Expression has type:   complex_map()
Context expected type: [dynamic()]
   │                

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: [dynamic()]

------------------------------ Detailed message ------------------------------

  complex_map() is not compatible with [dynamic()]
  because
  #{id := number(), {secret, id} => number(), atom() => term()} is not compatible with [dynamic()]

error: reveal_type (See https://fb.me/eqwalizer_errors#reveal_type)
   ┌─ check/src/gradual_complex_types.erl:55:25
   │
55 │   eqwalizer:reveal_type(M1),
   │                         ^^ #{a := number(), dynamic() => dynamic()}

error: reveal_type (See https://fb.me/eqwalizer_errors#reveal_type)
   ┌─ check/src/gradual_complex_types.erl:63:25
   │
63 │   eqwalizer:reveal_type(M1),
   │                         ^^ #{a := number(), dynamic() => dynamic()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/gradual_complex_types.erl:110:3
    │
110 │   generic(DM, S).
    │   ^^^^^^^^^^^^^^ generic(DM, S).
Expression has type:   dyn_map() | #{a => atom()}
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/gradual_complex_types.erl:115:3
    │
115 │   {DM, ok}.
    │   ^^^^^^^^
    │   │
    │   {DM, 'ok'}.
Expression has type:   {dyn_map(), 'ok'}
Context expected type: {#{a => 'atom'}, number()}
    │   

Because in the expression's type:
  { dyn_map(), 
    Here the type is:     'ok'
    Context expects type: number()
  }

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {dyn_map(), 'ok'} is not compatible with {#{a => 'atom'}, number()}
  because
  'ok' is not compatible with number()

9 ERRORS
