error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:11:21
   │
11 │ downcast_neg1(X) -> X.
   │                     ^
   │                     │
   │                     X.
Expression has type:   #{a => 'b', c => 'd'}
Context expected type: #{a => 'b'}
   │                     

Because in the expression's type:
  Here the type is:     #{c => ...}
  Context expects type: #{...}
  The expected map has no corresponding key for: c.

------------------------------ Detailed message ------------------------------

key `c` is declared in the former but not in the latter and the latter map has no default association

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:17:21
   │
17 │ downcast_neg2(X) -> X.
   │                     ^
   │                     │
   │                     X.
Expression has type:   #{a => 'b', c => 'd'}
Context expected type: #{a => 'b', atom() => number()}
   │                     

Because in the expression's type:
  #{ c =>
    Here the type is:     'd'
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a => 'b', c => 'd'} is not compatible with #{a => 'b', atom() => number()}
  because
  #{a => 'b', c => 'd'} is not compatible with #{a => 'b', atom() => number()}
  key `c` is declared in the former but not in the latter and key `c` isn't compatible with the default association of the latter map
  because
  'd' is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:20:19
   │
20 │ upcast_neg1(X) -> X.
   │                   ^
   │                   │
   │                   X.
Expression has type:   #{a => 'b', atom() => atom()}
Context expected type: #{a => 'b', c => 'd'}
   │                   

Because in the expression's type:
  Here the type is:     #{atom() => atom()}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{a => 'b', atom() => atom()} is not compatible with #{a => 'b', c => 'd'}
  key c is not present in the former map but is incompatible with its default association
  because
  atom() is not compatible with 'd'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:23:19
   │
23 │ upcast_neg2(X) -> X.
   │                   ^
   │                   │
   │                   X.
Expression has type:   #{a => 'b', atom() => number()}
Context expected type: #{a => 'b', c => 'd', atom() => number()}
   │                   

Because in the expression's type:
  #{ atom() =>
    Here the type is:     number()
    Context expects type: 'd'
  , ... }
  The context introduces a new association c => 'd' which is incompatible with the expression's default association.

------------------------------ Detailed message ------------------------------

  #{a => 'b', atom() => number()} is not compatible with #{a => 'b', c => 'd', atom() => number()}
  key c is not present in the former map but is incompatible with its default association
  because
  number() is not compatible with 'd'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:38:21
   │
38 │ downcast_neg3(X) -> X.
   │                     ^
   │                     │
   │                     X.
Expression has type:   #{a => 'b', atom() => atom()}
Context expected type: #{a => 'b'}
   │                     

Because in the expression's type:
  Here the type is:     #{atom() => atom()}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{a => 'b', atom() => atom()} is not compatible with #{a => 'b'}
  because
  #{a => 'b', atom() => atom()} is not compatible with #{a => 'b'}
  the latter map has no default association while the first map has one

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:44:26
   │
44 │ downcast_dyn_neg_1(X) -> X.
   │                          ^
   │                          │
   │                          X.
Expression has type:   #{a => 'b', dynamic(atom()) => atom()}
Context expected type: #{a => 'b'}
   │                          

Because in the expression's type:
  Here the type is:     #{dynamic(atom()) => atom()}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{a => 'b', dynamic(atom()) => atom()} is not compatible with #{a => 'b'}
  because
  #{a => 'b', dynamic(atom()) => atom()} is not compatible with #{a => 'b'}
  the latter map has no default association while the first map has one

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:47:26
   │
47 │ downcast_dyn_neg_2(X) -> X.
   │                          ^
   │                          │
   │                          X.
Expression has type:   #{a => 'b', atom() => dynamic(atom())}
Context expected type: #{a => 'b'}
   │                          

Because in the expression's type:
  Here the type is:     #{atom() => dynamic(atom())}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{a => 'b', atom() => dynamic(atom())} is not compatible with #{a => 'b'}
  because
  #{a => 'b', atom() => dynamic(atom())} is not compatible with #{a => 'b'}
  the latter map has no default association while the first map has one

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:56:44
   │
56 │ tuple_key_get_neg(#{{ok, {a, b}} := V}) -> V.
   │                                            ^ V.
Expression has type:   'v'
Context expected type: 'err'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:62:30
   │
62 │ tuple_key_maps_get_neg(M) -> maps:get({ok, {a, b}}, M).
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^ maps:get({'ok', {'a', 'b'}}, M).
Expression has type:   'v'
Context expected type: 'err'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:71:32
   │
71 │ get_default_neg1(#{a := V}) -> V.
   │                                ^ V.
Expression has type:   'b'
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:74:34
   │
74 │ get_default_neg2(#{def := V}) -> V.
   │                                  ^ V.
Expression has type:   number()
Context expected type: 'b'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:77:41
   │
77 │ match_required_1_neg(#{b := _V} = M) -> M.
   │                                         ^ M.
Expression has type:   #{a := number(), b := dynamic(), atom() => dynamic()}
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:80:28
   │
80 │ compat_default_1_neg(X) -> X.
   │                            ^
   │                            │
   │                            X.
Expression has type:   #{atom() => binary()}
Context expected type: #{a => binary(), atom() => atom()}
   │                            

Because in the expression's type:
  #{ atom() =>
    Here the type is:     binary()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{atom() => binary()} is not compatible with #{a => binary(), atom() => atom()}
  the default associations are not compatible
  because
  binary() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:83:28
   │
83 │ compat_default_2_neg(X) -> X.
   │                            ^
   │                            │
   │                            X.
Expression has type:   #{a := 'b', atom() => binary()}
Context expected type: #{a => 'b', {c, d} => atom() | binary(), term() => atom()}
   │                            

Because in the expression's type:
  #{ atom() =>
    Here the type is:     binary()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := 'b', atom() => binary()} is not compatible with #{a => 'b', {c, d} => atom() | binary(), term() => atom()}
  the default associations are not compatible
  because
  binary() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:86:28
   │
86 │ compat_default_3_neg(X) -> X.
   │                            ^
   │                            │
   │                            X.
Expression has type:   #{a := 'b', atom() => binary()}
Context expected type: #{a => 'b', {c, d} => atom() | binary(), atom() => atom()}
   │                            

Because in the expression's type:
  #{ atom() =>
    Here the type is:     binary()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := 'b', atom() => binary()} is not compatible with #{a => 'b', {c, d} => atom() | binary(), atom() => atom()}
  the default associations are not compatible
  because
  binary() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/complex_maps.erl:89:29
   │
89 │ dyn_domain_coerce_neg(X) -> X.
   │                             ^
   │                             │
   │                             X.
Expression has type:   #{dynamic() => atom()}
Context expected type: #{dynamic() => binary()}
   │                             

Because in the expression's type:
  #{ dynamic() =>
    Here the type is:     atom()
    Context expects type: binary()
  , ... }

------------------------------ Detailed message ------------------------------

  #{dynamic() => atom()} is not compatible with #{dynamic() => binary()}
  the default associations are not compatible
  because
  atom() is not compatible with binary()

16 ERRORS
