error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:12:17
   │
12 │ param1(X, X) -> X.
   │                 ^ X.
Expression has type:   _B
Context expected type: none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:16:17
   │
16 │ param2(X, X) -> X.
   │                 ^
   │                 │
   │                 X.
Expression has type:   {B, A}
Context expected type: {none(), none()}
   │                 

Because in the expression's type:
  { 
    Here the type is:     B
    Context expects type: none()
  , A}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {B, A} is not compatible with {none(), none()}
  because
  B is not compatible with none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:22:15
   │
22 │ maps(M, M) -> M.
   │               ^ M.
Expression has type:   #{a := atom()}
Context expected type: none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:28:16
   │
28 │ funs1(F, F) -> F.
   │                ^
   │                │
   │                F.
Expression has type:   fun((B | A) -> A)
Context expected type: fun((A | B) -> none())
   │                

Because in the expression's type:
  fun((B | A) ->
    Here the type is:     A
    Context expects type: none()
  )

------------------------------ Detailed message ------------------------------

  fun((B | A) -> A) is not compatible with fun((A | B) -> none())
  because
  A is not compatible with none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:34:16
   │
34 │ funs2(F, F) -> F.
   │                ^
   │                │
   │                F.
Expression has type:   fun((atom() | A) -> A)
Context expected type: fun((A | atom()) -> none())
   │                

Because in the expression's type:
  fun((atom() | A) ->
    Here the type is:     A
    Context expects type: none()
  )

------------------------------ Detailed message ------------------------------

  fun((atom() | A) -> A) is not compatible with fun((A | atom()) -> none())
  because
  A is not compatible with none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:84:27
   │
84 │ list_trick_neg([X], _) -> X.
   │                           ^ X.
Expression has type:   term()
Context expected type: U

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/refine.erl:92:28
   │
92 │ tuple_trick_neg({X}, _) -> X.
   │                            ^ X.
Expression has type:   term()
Context expected type: U

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:101:8
    │
101 │     -> X.
    │        ^ X.
Expression has type:   _T
Context expected type: U

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:112:24
    │
112 │     (#{key := Val}) -> Val.
    │                        ^^^ Val.
Expression has type:   term()
Context expected type: none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:117:26
    │
117 │     (<<X, Y/binary>>) -> {X, Y}.
    │                          ^^^^^^
    │                          │
    │                          {X, Y}.
Expression has type:   {number(), binary()}
Context expected type: {none(), none()}
    │                          

Because in the expression's type:
  { 
    Here the type is:     number()
    Context expects type: none()
  , binary()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {number(), binary()} is not compatible with {none(), none()}
  because
  number() is not compatible with none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:126:32
    │
126 │     (#my_rec{n = N, a = A}) -> {N, A}.
    │                                ^^^^^^
    │                                │
    │                                {N, A}.
Expression has type:   {number(), atom()}
Context expected type: {none(), none()}
    │                                

Because in the expression's type:
  { 
    Here the type is:     number()
    Context expects type: none()
  , atom()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {number(), atom()} is not compatible with {none(), none()}
  because
  number() is not compatible with none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:139:28
    │
139 │ refine_alist1_neg(X, X) -> X.
    │                            ^ X.
Expression has type:   ['a' | 'b']
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:144:24
    │
144 │ refine_alist2(X, X) -> X.
    │                        ^
    │                        │
    │                        X.
Expression has type:   ['a' | 'b']
Context expected type: ['a']
    │                        

Because in the expression's type:
  [
    Here the type is a union type with some valid candidates: 'a'
    However the following candidate: 'b'
    Differs from the expected type:  'a'
  ]

------------------------------ Detailed message ------------------------------

  ['a' | 'b'] is not compatible with ['a']
  because
  'a' | 'b' is not compatible with 'a'
  because
  'b' is not compatible with 'a'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:151:28
    │
151 │ refine_tlist1_neg(X, X) -> X.
    │                            ^ X.
Expression has type:   ['a' | 'b']
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:156:24
    │
156 │ refine_tlist2(X, X) -> X.
    │                        ^
    │                        │
    │                        X.
Expression has type:   ['a' | 'b']
Context expected type: ['a']
    │                        

Because in the expression's type:
  [
    Here the type is a union type with some valid candidates: 'a'
    However the following candidate: 'b'
    Differs from the expected type:  'a'
  ]

------------------------------ Detailed message ------------------------------

  ['a' | 'b'] is not compatible with ['a']
  because
  'a' | 'b' is not compatible with 'a'
  because
  'b' is not compatible with 'a'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:166:5
    │
166 │     Res.
    │     ^^^ Res.
Expression has type:   {'cons', 'nil' | my_list()}
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:177:24
    │
177 │ opaque1_neg({X, _}) -> X.
    │                        ^ X.
Expression has type:   number()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:183:24
    │
183 │ opaque2_neg([X, _]) -> X.
    │                        ^
    │                        │
    │                        X.
Expression has type:   erl_anno:annotation()
Context expected type: pid()
    │                        

Because in the expression's type:
  Here the type is:     tuple()/2 | tuple()/2 | tuple()/2 | tuple()/2 | tuple()/2
  Context expects type: pid()
  No candidate of the expression's type matches the expected type.

------------------------------ Detailed message ------------------------------

  erl_anno:annotation() is not compatible with pid()
  because
  {'file', erl_anno:filename()} | {'generated', erl_anno:generated()} | {'record', erl_anno:record()} | {'text', string()} | {'location', erl_anno:location()} is not compatible with pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:191:7
    │
191 │ }) -> X.
    │       ^ X.
Expression has type:   'set'
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:198:23
    │
198 │ opaque_4_neg(X, X) -> X.
    │                       ^
    │                       │
    │                       X.
Expression has type:   gb_sets:set(atom())
Context expected type: pid()
    │                       

Because in the expression's type:
  Here the type is:     {number(), gb_sets:gb_set_node(atom())}
  Context expects type: pid()

------------------------------ Detailed message ------------------------------

  gb_sets:set(atom()) is not compatible with pid()
  because
  {number(), gb_sets:gb_set_node(atom())} is not compatible with pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:202:31
    │
202 │ record_as_tuple1_neg(R, R) -> R.
    │                               ^ R.
Expression has type:   #my_rec{}
Context expected type: none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:206:31
    │
206 │ record_as_tuple2_neg(R, R) -> R.
    │                               ^ R.
Expression has type:   #my_rec{}
Context expected type: none()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:222:28
    │
222 │ record_as_tuple6_neg(R) -> R.
    │                            ^
    │                            │
    │                            R.
Expression has type:   #my_rec{}
Context expected type: {'not_my_rec', term(), term()}
    │                            

Because in the expression's type:
  { 
    Here the type is:     'my_rec'
    Context expects type: 'not_my_rec'
  , number(), atom()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {'my_rec', number(), atom()} is not compatible with {'not_my_rec', term(), term()}
  because
  'my_rec' is not compatible with 'not_my_rec'

error: unknown_id (See https://fb.me/eqwalizer_errors#unknown_id)
    ┌─ check/src/refine.erl:226:10
    │
226 │     i :: unknown:unknown()
    │          ^^^^^^^^^^^^^^^^^ Unknown id: unknown:unknown/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/refine.erl:228:1
    │  
228 │ ╭ -spec record_as_tuple7_neg
229 │ │ (#bad_rec{}) -> {bad_rec, atom()}.
    │ ╰─────────────────────────────────^ record_as_tuple7_neg/1 references type with invalid definition: #bad_rec{}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:240:28
    │
240 │ tuple_as_record2_neg(R) -> R.
    │                            ^
    │                            │
    │                            R.
Expression has type:   {'my_rec', atom(), number()}
Context expected type: #my_rec{}
    │                            

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     atom()
    Context expects type: number()
  , number()}

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {'my_rec', atom(), number()} is not compatible with {'my_rec', number(), atom()}
  because
  atom() is not compatible with number()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/refine.erl:245:1
    │  
245 │ ╭ tup_guard_record1(X)
246 │ │     when is_record(X, my_rec) ->
247 │ │     X * 2.
    │ ╰─────────^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:253:5
    │
253 │     X * 2.
    │     ^ X.
Expression has type:   #my_rec{}
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:259:5
    │
259 │     X * 2.
    │     ^ X.
Expression has type:   #my_rec{}
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:262:14
    │
262 │ ftt(X, _) -> X.
    │              ^ X.
Expression has type:   fun((T) -> 'ok')
Context expected type: T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:265:20
    │
265 │ my_rec_to_ok(X) -> X.
    │                    ^ X.
Expression has type:   #my_rec{}
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:277:26
    │
277 │ use2_neg(F, X) -> ftt(F, X).
    │                          ^
    │                          │
    │                          X.
Expression has type:   {'my_rec', atom(), number()}
Context expected type: #my_rec{}
    │                          

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     atom()
    Context expects type: number()
  , number()}

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {'my_rec', atom(), number()} is not compatible with {'my_rec', number(), atom()}
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:277:26
    │
277 │ use2_neg(F, X) -> ftt(F, X).
    │                          ^
    │                          │
    │                          X.
Expression has type:   {'my_rec', atom(), number()}
Context expected type: dynamic(#my_rec{})
    │                          

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     atom()
    Context expects type: number()
  , number()}

------------------------------ Detailed message ------------------------------

  {'my_rec', atom(), number()} is not compatible with dynamic(#my_rec{})
  because
  at tuple index 2:
  {'my_rec', atom(), number()} is not compatible with {'my_rec', number(), atom()}
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:289:26
    │
289 │ use4_neg(F, X) -> ftt(F, X).
    │                          ^
    │                          │
    │                          X.
Expression has type:   #my_rec{}
Context expected type: {'my_rec', atom(), number()}
    │                          

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     number()
    Context expects type: atom()
  , atom()}

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {'my_rec', number(), atom()} is not compatible with {'my_rec', atom(), number()}
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:289:26
    │
289 │ use4_neg(F, X) -> ftt(F, X).
    │                          ^
    │                          │
    │                          X.
Expression has type:   #my_rec{}
Context expected type: dynamic({'my_rec', atom(), number()})
    │                          

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     number()
    Context expects type: atom()
  , atom()}

------------------------------ Detailed message ------------------------------

  #my_rec{} is not compatible with dynamic({'my_rec', atom(), number()})
  because
  at tuple index 2:
  {'my_rec', number(), atom()} is not compatible with {'my_rec', atom(), number()}
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:305:21
    │
305 │ use6_neg(X) -> ttt2(X, x).
    │                     ^
    │                     │
    │                     X.
Expression has type:   #my_rec{}
Context expected type: {'my_rec', atom(), atom()}
    │                     

Because in the expression's type:
  { 'my_rec', 
    Here the type is:     number()
    Context expects type: atom()
  , atom()}

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {'my_rec', number(), atom()} is not compatible with {'my_rec', atom(), atom()}
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:309:16
    │
309 │ use7_neg(X) -> ttt1(X, 1).
    │                ^^^^^^^^^^
    │                │
    │                ttt1(X, 1).
Expression has type:   atom() | number()
Context expected type: number()
    │                

Because in the expression's type:
  Here the type is a union type with some valid candidates: number()
  However the following candidate: atom()
  Differs from the expected type:  number()

------------------------------ Detailed message ------------------------------

  atom() | number() is not compatible with number()
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:313:13
    │
313 │ deets(X) -> X.
    │             ^
    │             │
    │             X.
Expression has type:   #my_rec{} | 'a'
Context expected type: {'my_rec', term(), term()}
    │             

Because in the expression's type:
  Here the type is a union type with some valid candidates: #my_rec{}
  However the following candidate: 'a'
  Differs from the expected type:  {'my_rec', term(), term()}

------------------------------ Detailed message ------------------------------

  #my_rec{} | 'a' is not compatible with {'my_rec', term(), term()}
  because
  'a' is not compatible with {'my_rec', term(), term()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:323:5
    │
323 │     B.
    │     ^
    │     │
    │     B.
Expression has type:   'undefined' | binary()
Context expected type: binary()
    │     

Because in the expression's type:
  Here the type is a union type with some valid candidates: binary()
  However the following candidate: 'undefined'
  Differs from the expected type:  binary()

------------------------------ Detailed message ------------------------------

  'undefined' | binary() is not compatible with binary()
  because
  'undefined' is not compatible with binary()

error: reveal_type (See https://fb.me/eqwalizer_errors#reveal_type)
    ┌─ check/src/refine.erl:405:27
    │
405 │     eqwalizer:reveal_type(Name),
    │                           ^^^^ atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/refine.erl:406:5
    │
406 │     Name.
    │     ^^^^ Name.
Expression has type:   atom()
Context expected type: 'ok'

41 ERRORS
