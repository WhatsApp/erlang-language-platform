error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/generics_with_unions.erl:17:18
   │
17 │ test02_neg(X) -> {X, X}.
   │                  ^^^^^^
   │                  │
   │                  {X, X}.
Expression has type:   {T | U, T | U}
Context expected type: {T, U}
   │                  

Because in the expression's type:
  { 
    Here the type is a union type with some valid candidates: T
    However the following candidate: U
    Differs from the expected type:  T
  , T | U}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {T | U, T | U} is not compatible with {T, U}
  because
  T | U is not compatible with T
  because
  U is not compatible with T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/generics_with_unions.erl:70:19
   │
70 │ test_ret_neg() -> union(a, b).
   │                   ^^^^^^^^^^^ union('a', 'b').
Expression has type:   'a' | 'b'
Context expected type: 'ok'

error: unbound_type_var (See https://fb.me/eqwalizer_errors#unbound_type_var)
   ┌─ check/src/generics_with_unions.erl:72:1
   │
72 │ -type ty_var_from_nowhere() :: _T.
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ _T: Type variable is unbound.

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
   ┌─ check/src/generics_with_unions.erl:74:1
   │  
74 │ ╭ -spec test_uses_ty_var_from_nowhere
75 │ │     (pid() | ty_var_from_nowhere())
76 │ │     -> nok.
   │ ╰──────────^ test_uses_ty_var_from_nowhere/1 references type with invalid definition: ty_var_from_nowhere/0

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:132:5
    │
132 │     set_list([{a, 5}], [{a, 5}]).
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │     │
    │     set_list([{'a', 5}], [{'a', 5}]).
Expression has type:   props('a', number())
Context expected type: 'wrong_ret'
    │     

Because in the expression's type:
  Here the type is:     [prop('a', number())]
  Context expects type: 'wrong_ret'

------------------------------ Detailed message ------------------------------

  props('a', number()) is not compatible with 'wrong_ret'
  because
  [prop('a', number())] is not compatible with 'wrong_ret'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:217:19
    │
217 │ overlap_1([T]) -> T;
    │                   ^ T.
Expression has type:   term()
Context expected type: T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:218:17
    │
218 │ overlap_1(T) -> T.
    │                 ^
    │                 │
    │                 T.
Expression has type:   [T] | T
Context expected type: T
    │                 

Because in the expression's type:
  Here the type is a union type with some valid candidates: T
  However the following candidate: [T]
  Differs from the expected type:  T

------------------------------ Detailed message ------------------------------

  [T] | T is not compatible with T
  because
  [T] is not compatible with T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:221:17
    │
221 │ overlap_2(T) -> T;
    │                 ^
    │                 │
    │                 T.
Expression has type:   T | [T]
Context expected type: T
    │                 

Because in the expression's type:
  Here the type is a union type with some valid candidates: T
  However the following candidate: [T]
  Differs from the expected type:  T

------------------------------ Detailed message ------------------------------

  T | [T] is not compatible with T
  because
  [T] is not compatible with T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:222:19
    │
222 │ overlap_2([T]) -> T.
    │                   ^ T.
Expression has type:   term()
Context expected type: T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:230:5
    │
230 │     overlap_2([ok]).
    │     ^^^^^^^^^^^^^^^ overlap_2(['ok']).
Expression has type:   'ok'
Context expected type: ['ok']

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:233:18
    │
233 │ trick(_, {B}) -> B.
    │                  ^ B.
Expression has type:   term()
Context expected type: B

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:256:5
    │
256 │     Default;
    │     ^^^^^^^ Default.
Expression has type:   term()
Context expected type: Value

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:328:29
    │
328 │ overlapping_union_neg(X) -> X.
    │                             ^
    │                             │
    │                             X.
Expression has type:   [K] | [[K]]
Context expected type: [K]
    │                             

Because in the expression's type:
  The type is a union type with some valid candidates: [K]
  However, the following candidate doesn't match:
  [
    Here the type is:     [K]
    Context expects type: K
  ]

------------------------------ Detailed message ------------------------------

  [K] | [[K]] is not compatible with [K]
  because
  [[K]] is not compatible with [K]
  because
  [K] is not compatible with K

error: ambiguous_union (See https://fb.me/eqwalizer_errors#ambiguous_union)
    ┌─ check/src/generics_with_unions.erl:332:31
    │
332 │     _ = overlapping_union_neg([]),
    │                               ^^ [].
Expression has type [] which matches multiple generic types in [K] | [[K]]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:379:28
    │
379 │     Q2 = where1({i, atom}, Q),
    │                            ^
    │                            │
    │                            Q.
Expression has type:   query()
Context expected type: fun(({'i', 'atom'}) -> 'ok')
    │                            

Because in the expression's type:
  fun((
    { 'i', 
      Here the type is:     'atom'
      Context expects type: number()
    }
  ) -> 'ok')

------------------------------ Detailed message ------------------------------

  query() is not compatible with fun(({'i', 'atom'}) -> 'ok')
  because
  fun(({'a', atom()} | {'b', binary()} | {'i', number()}) -> 'ok') is not compatible with fun(({'i', 'atom'}) -> 'ok')
  because
  {'i', 'atom'} is not compatible with {'a', atom()} | {'b', binary()} | {'i', number()}
  because
  at tuple index 2:
  {'i', 'atom'} is not compatible with {'i', number()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/generics_with_unions.erl:392:17
    │
392 │     Q2 = where2(Q, {a, 123}),
    │                 ^
    │                 │
    │                 Q.
Expression has type:   query()
Context expected type: fun(({'a', number()}) -> 'ok')
    │                 

Because in the expression's type:
  fun((
    { 'a', 
      Here the type is:     number()
      Context expects type: atom()
    }
  ) -> 'ok')

------------------------------ Detailed message ------------------------------

  query() is not compatible with fun(({'a', number()}) -> 'ok')
  because
  fun(({'a', atom()} | {'b', binary()} | {'i', number()}) -> 'ok') is not compatible with fun(({'a', number()}) -> 'ok')
  because
  {'a', number()} is not compatible with {'a', atom()} | {'b', binary()} | {'i', number()}
  because
  at tuple index 2:
  {'a', number()} is not compatible with {'a', atom()}

16 ERRORS
