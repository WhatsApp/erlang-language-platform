error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/recursive_aliases.erl:59:20
   │
59 │ subtype3_neg(C) -> C.
   │                    ^
   │                    │
   │                    C.
Expression has type:   chainA()
Context expected type: chainB()
   │                    

Because in the expression's type:
  The type is a union type with some valid candidates: 'nil'
  However, the following candidate doesn't match:
  { 
    Here the type is:     'a'
    Context expects type: 'b'
  , chainA()}

------------------------------ Detailed message ------------------------------

  chainA() is not compatible with chainB()
  because
  'nil' | {'a', chainA()} is not compatible with chainB()
  because
  'nil' | {'a', chainA()} is not compatible with 'nil' | {'b', chainB()}
  because
  {'a', chainA()} is not compatible with 'nil' | {'b', chainB()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/recursive_aliases.erl:62:20
   │
62 │ subtype4_neg(C) -> C.
   │                    ^
   │                    │
   │                    C.
Expression has type:   chainB()
Context expected type: chainA()
   │                    

Because in the expression's type:
  The type is a union type with some valid candidates: 'nil'
  However, the following candidate doesn't match:
  { 
    Here the type is:     'b'
    Context expects type: 'a'
  , chainB()}

------------------------------ Detailed message ------------------------------

  chainB() is not compatible with chainA()
  because
  'nil' | {'b', chainB()} is not compatible with chainA()
  because
  'nil' | {'b', chainB()} is not compatible with 'nil' | {'a', chainA()}
  because
  {'b', chainB()} is not compatible with 'nil' | {'a', chainA()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/recursive_aliases.erl:65:20
   │
65 │ subtype5_neg(C) -> C.
   │                    ^
   │                    │
   │                    C.
Expression has type:   chainAB()
Context expected type: chainA()
   │                    

Because in the expression's type:
  The type is a union type with some valid candidates: 'nil' | {'a', chainAB()}
  However, the following candidate doesn't match:
  { 
    Here the type is:     'b'
    Context expects type: 'a'
  , chainAB()}

------------------------------ Detailed message ------------------------------

  chainAB() is not compatible with chainA()
  because
  'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with chainA()
  because
  'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with 'nil' | {'a', chainA()}
  because
  {'b', chainAB()} is not compatible with 'nil' | {'a', chainA()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/recursive_aliases.erl:68:20
   │
68 │ subtype6_neg(C) -> C.
   │                    ^
   │                    │
   │                    C.
Expression has type:   chainAB()
Context expected type: chainB()
   │                    

Because in the expression's type:
  The type is a union type with some valid candidates: 'nil' | {'b', chainAB()}
  However, the following candidate doesn't match:
  { 
    Here the type is:     'a'
    Context expects type: 'b'
  , chainAB()}

------------------------------ Detailed message ------------------------------

  chainAB() is not compatible with chainB()
  because
  'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with chainB()
  because
  'nil' | {'a', chainAB()} | {'b', chainAB()} is not compatible with 'nil' | {'b', chainB()}
  because
  {'a', chainAB()} is not compatible with 'nil' | {'b', chainB()}

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
   ┌─ check/src/recursive_aliases.erl:70:1
   │
70 │ -type non_prod() :: non_prod().
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type non_prod/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
   ┌─ check/src/recursive_aliases.erl:72:1
   │  
72 │ ╭ -spec non_prod_id(non_prod()) ->
73 │ │     non_prod() | number().
   │ ╰───────────────────────^ non_prod_id/1 references type with invalid definition: non_prod/0

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/recursive_aliases.erl:81:22
   │
81 │ subtype_p1_neg(C) -> C.
   │                      ^
   │                      │
   │                      C.
Expression has type:   pchainA(atom())
Context expected type: pchainAB(atom())
   │                      

Because in the expression's type:
  Here the type is a union type with some valid candidates: 'nil'
  However the following candidate: {'a', atom(), pchainA(atom())}
  Differs from the expected type:  'nil' | {'a', pchainAB(atom())} | {'b', pchainAB(atom())}

------------------------------ Detailed message ------------------------------

  pchainA(atom()) is not compatible with pchainAB(atom())
  because
  'nil' | {'a', atom(), pchainA(atom())} is not compatible with pchainAB(atom())
  because
  'nil' | {'a', atom(), pchainA(atom())} is not compatible with 'nil' | {'a', pchainAB(atom())} | {'b', pchainAB(atom())}
  because
  {'a', atom(), pchainA(atom())} is not compatible with 'nil' | {'a', pchainAB(atom())} | {'b', pchainAB(atom())}
  expected union does not contain any tuple type of size 3

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/recursive_aliases.erl:113:23
    │
113 │     1 + m_chainA_size(Chain).
    │                       ^^^^^
    │                       │
    │                       Chain.
Expression has type:   mChainB()
Context expected type: mChainA()
    │                       

Because in the expression's type:
  Here the type is a union type with some valid candidates: 'nil'
  However the following candidate: #{b := mChainB()}
  Differs from the expected type:  'nil' | #{a := mChainA()}

------------------------------ Detailed message ------------------------------

  mChainB() is not compatible with mChainA()
  because
  'nil' | #{b := mChainB()} is not compatible with mChainA()
  because
  'nil' | #{b := mChainB()} is not compatible with 'nil' | #{a := mChainA()}
  because
  #{b := mChainB()} is not compatible with 'nil' | #{a := mChainA()}

error: expected_fun_type (See https://fb.me/eqwalizer_errors#expected_fun_type)
    ┌─ check/src/recursive_aliases.erl:138:15
    │
138 │ fun_fan(F) -> F().
    │               ^ F.
Expected fun type with arity 0
Got: fan()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/recursive_aliases.erl:187:21
    │
187 │ subtype_6_neg(C) -> C.
    │                     ^
    │                     │
    │                     C.
Expression has type:   pchainA('a')
Context expected type: pchainA('b' | 'c')
    │                     

Because in the expression's type:
  The type is a union type with some valid candidates: 'nil'
  However, the following candidate doesn't match:
  { 'a', 
    Here the type is:     'a'
    Context expects type: 'b' | 'c'
    No candidate matches in the expected union.
  , pchainA('a')}

------------------------------ Detailed message ------------------------------

  pchainA('a') is not compatible with pchainA('b' | 'c')
  because
  'nil' | {'a', 'a', pchainA('a')} is not compatible with pchainA('b' | 'c')
  because
  'nil' | {'a', 'a', pchainA('a')} is not compatible with 'nil' | {'a', 'b' | 'c', pchainA('b' | 'c')}
  because
  {'a', 'a', pchainA('a')} is not compatible with 'nil' | {'a', 'b' | 'c', pchainA('b' | 'c')}

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:202:1
    │
202 │ -type mu_bad() :: mu_bad() | {a}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:204:1
    │  
204 │ ╭ -spec to_mu_bad_neg() ->
205 │ │   mu_bad().
    │ ╰────────^ to_mu_bad_neg/0 references type with invalid definition: mu_bad/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:208:1
    │  
208 │ ╭ -spec test_mu_bad_neg(mu_bad()) ->
209 │ │   pid().
    │ ╰─────^ test_mu_bad_neg/1 references type with invalid definition: mu_bad/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:212:1
    │
212 │ -type mu(A) :: {mu, mu(mu(A))}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type mu/1 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:214:1
    │
214 │ -spec test2_neg(mu(A)) -> mu(mu(A)).
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ test2_neg/1 references type with invalid definition: mu/1

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/recursive_aliases.erl:223:23
    │
223 │ test4_neg({mu, M}) -> M.
    │                       ^ M.
Expression has type:   atom() | mu2()
Context expected type: pid()

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:296:1
    │
296 │ -type mu_bad2() :: id(mu_bad2()).
    │ ^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad2/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:297:1
    │
297 │ -type mu_bad2b() :: id(mu_bad2()).
    │ ^^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad2b/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:299:1
    │
299 │ -type mu_bad3() :: id(mu_bad3()).
    │ ^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad3/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:301:1
    │  
301 │ ╭ -spec to_mu_bad3_neg(mu_bad2()) ->
302 │ │     mu_bad3().
    │ ╰───────────^ to_mu_bad3_neg/1 references types with invalid definitions: mu_bad2/0, mu_bad3/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:305:1
    │  
305 │ ╭ -spec to_mu_bad2b_neg(mu_bad2()) ->
306 │ │   mu_bad2b().
    │ ╰──────────^ to_mu_bad2b_neg/1 references types with invalid definitions: mu_bad2/0, mu_bad2b/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:309:1
    │
309 │ -type indirect2() :: mutual2().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type indirect2/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:310:1
    │
310 │ -type indirect1() :: mutual1().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type indirect1/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:312:1
    │  
312 │ ╭ -type mutual1() :: indirect1()
313 │ │   | indirect2().
    │ ╰─────────────^ recursive type mutual1/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:314:1
    │  
314 │ ╭ -type mutual2() :: indirect1()
315 │ │   | indirect2().
    │ ╰─────────────^ recursive type mutual2/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:317:1
    │  
317 │ ╭ -spec test_mutual_neg(mutual1()) ->
318 │ │     mutual2().
    │ ╰───────────^ test_mutual_neg/1 references types with invalid definitions: mutual1/0, mutual2/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:342:1
    │
342 │ -type mu_bad5() :: opaque_id(mu_bad5()).
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad5/0 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:343:1
    │
343 │ -type mu_bad5b() :: opaque_id(mu_bad5()).
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type mu_bad5b/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:345:1
    │  
345 │ ╭ -spec test_mu_bad5(
346 │ │     mu_bad5()
347 │ │ ) -> mu_bad5b().
    │ ╰─────────────^ test_mu_bad5/1 references types with invalid definitions: mu_bad5/0, mu_bad5b/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:392:1
    │
392 │ -type recur() :: foo(recur()) | a.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type recur/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:395:1
    │
395 │ -spec un_recur_neg(recur()) -> ok.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ un_recur_neg/1 references type with invalid definition: recur/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:399:1
    │  
399 │ ╭ -spec term_to_recur_neg(term()) ->
400 │ │   recur().
    │ ╰───────^ term_to_recur_neg/1 references type with invalid definition: recur/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:409:1
    │  
409 │ ╭ -type foo7_neg(T) ::
410 │ │   {unit, foo7_neg(foo7_neg(T))}.
    │ ╰───────────────────────────────^ recursive type foo7_neg/1 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:441:1
    │
441 │ -type x_cycle() :: misc:x_cycle().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type x_cycle/0 is not productive

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/recursive_aliases.erl:460:1
    │
460 │ trick_me(X, X) -> X.
    │ ^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:477:1
    │  
477 │ ╭ -type t_tree2(Z) ::
478 │ │   {leaf, Z} |
479 │ │   {node, t_tree2(simple_id(Z))}.
    │ ╰───────────────────────────────^ recursive type t_tree2/1 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:481:1
    │  
481 │ ╭ -type t_tree3(Z) ::
482 │ │   {leaf, Z} |
483 │ │   {node, t_tree3(t_tree3(Z))}.
    │ ╰─────────────────────────────^ recursive type t_tree3/1 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:493:1
    │  
493 │ ╭ -type stream2(Z) ::
494 │ │   {chunk, stream2(simple_id(Z))}.
    │ ╰────────────────────────────────^ recursive type stream2/1 is not productive

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/recursive_aliases.erl:505:1
    │  
505 │ ╭ -type d_stream(Z) ::
506 │ │   {chunk, d_stream([Z])}.
    │ ╰────────────────────────^ recursive type d_stream/1 is not productive

error: unknown_id (See https://fb.me/eqwalizer_errors#unknown_id)
    ┌─ check/src/recursive_aliases.erl:508:23
    │
508 │ -type invalid_ty() :: non_exist:invalid().
    │                       ^^^^^^^^^^^^^^^^^^^ Unknown id: non_exist:invalid/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:510:1
    │  
510 │ ╭ -type invalid_rec() ::
511 │ │   invalid_ty() | invalid_transitive().
    │ ╰───────────────────────────────────^ invalid_rec/0 references type with invalid definition: invalid_ty/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:513:1
    │  
513 │ ╭ -type invalid_transitive() ::
514 │ │   {a, invalid_rec()}.
    │ ╰────────────────────^ invalid_transitive/0 references type with invalid definition: invalid_rec/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/recursive_aliases.erl:516:1
    │  
516 │ ╭ -spec use_invalid
517 │ │   (invalid_transitive()) -> a.
    │ ╰─────────────────────────────^ use_invalid/1 references type with invalid definition: invalid_transitive/0

43 ERRORS
