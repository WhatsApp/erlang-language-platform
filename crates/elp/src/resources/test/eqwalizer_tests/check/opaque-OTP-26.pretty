error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/opaque.erl:23:3
   │
23 │   X.
   │   ^
   │   │
   │   X.
Expression has type:   sets:set({'ok', 'error'})
Context expected type: sets:set({'ok', 'ok'})
   │   

Because in the expression's type:
  Here the type is a union type with some valid candidates: #set{}
  However the following candidate: #{{ok, error} => []}
  Differs from the expected type:  #set{} | #{{ok, ok} => []}

------------------------------ Detailed message ------------------------------

  sets:set({'ok', 'error'}) is not compatible with sets:set({'ok', 'ok'})
  because
  #set{} | #{{ok, error} => []} is not compatible with sets:set({'ok', 'ok'})
  because
  #set{} | #{{ok, error} => []} is not compatible with #set{} | #{{ok, ok} => []}
  because
  #{{ok, error} => []} is not compatible with #set{} | #{{ok, ok} => []}

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
   ┌─ check/src/opaque.erl:29:1
   │
29 │ test2_neg(X=#{a := b}) -> X.
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/opaque.erl:57:11
   │
57 │           X2
   │           ^^
   │           │
   │           X2.
Expression has type:   misc:o()
Context expected type: none()
   │           

Because in the expression's type:
  Here the type is:     {'ok'}
  Context expects type: none()

------------------------------ Detailed message ------------------------------

  misc:o() is not compatible with none()
  because
  {'ok'} is not compatible with none()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
   ┌─ check/src/opaque.erl:86:1
   │  
86 │ ╭ test10({rec_w_opaque_field,
87 │ │   {_, _}}
88 │ │ ) -> ok.
   │ ╰───────^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/opaque.erl:95:6
   │
95 │ ) -> X.
   │      ^ X.
Expression has type:   'ok'
Context expected type: {'ok'}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/opaque.erl:107:18
    │
107 │ test14_neg(X) -> X =:= {ok}.
    │                  ^^^^^^^^^^ _ =:= _.
Expression has type:   boolean()
Context expected type: 'true'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/opaque.erl:125:18
    │
125 │ test18_neg(X) -> X.
    │                  ^
    │                  │
    │                  X.
Expression has type:   misc:o() | 'a'
Context expected type: misc:o()
    │                  

Because in the expression's type:
  Here the type is a union type with some valid candidates: misc:o()
  However the following candidate: 'a'
  Differs from the expected type:  {'ok'}

------------------------------ Detailed message ------------------------------

  misc:o() | 'a' is not compatible with misc:o()
  because
  misc:o() | 'a' is not compatible with {'ok'}
  because
  'a' is not compatible with {'ok'}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/opaque.erl:135:18
    │
135 │ test20_neg(X) -> X.
    │                  ^
    │                  │
    │                  X.
Expression has type:   misc:o() | 'a'
Context expected type: misc:o()
    │                  

Because in the expression's type:
  Here the type is a union type with some valid candidates: misc:o()
  However the following candidate: 'a'
  Differs from the expected type:  {'ok'}

------------------------------ Detailed message ------------------------------

  misc:o() | 'a' is not compatible with misc:o()
  because
  misc:o() | 'a' is not compatible with {'ok'}
  because
  'a' is not compatible with {'ok'}

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/opaque.erl:150:1
    │
150 │ -opaque o_cycle() :: misc:o_cycle().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type o_cycle/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/opaque.erl:152:1
    │  
152 │ ╭ -spec use_o_cycle1(misc:o_cycle()) ->
153 │ │   opaque:o_cycle().
    │ ╰──────────────────^ use_o_cycle1/1 references types with invalid definitions: misc:o_cycle/0, o_cycle/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/opaque.erl:156:1
    │  
156 │ ╭ -spec use_o_cycle2(opaque:o_cycle()) ->
157 │ │   misc:o_cycle().
    │ ╰────────────────^ use_o_cycle2/1 references types with invalid definitions: misc:o_cycle/0, o_cycle/0

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/opaque.erl:236:1
    │  
236 │ ╭ test29_neg(X) when X =:= {1.0} ->
237 │ │   ok.
    │ ╰────^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/opaque.erl:240:1
    │  
240 │ ╭ test30_neg(X) when X =:= "" ->
241 │ │   ok.
    │ ╰────^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/opaque.erl:256:1
    │  
256 │ ╭ test34_neg(X) when X =:= <<>> ->
257 │ │   ok.
    │ ╰────^ Clause is not covered by spec

error: unbound_type_var (See https://fb.me/eqwalizer_errors#unbound_type_var)
    ┌─ check/src/opaque.erl:288:1
    │
288 │ -type invalid() :: _T.
    │ ^^^^^^^^^^^^^^^^^^^^^ _T: Type variable is unbound.

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/opaque.erl:290:1
    │
290 │ -opaque o_trans_invalid() :: invalid().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ o_trans_invalid/0 references type with invalid definition: invalid/0

16 ERRORS
