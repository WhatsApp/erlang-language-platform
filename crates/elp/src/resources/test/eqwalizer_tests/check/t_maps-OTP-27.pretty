error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/t_maps.erl:36:5
   │
36 │     #{0 => 1, 1 => 2}.
   │     ^^^^^^^^^^^^^^^^^
   │     │
   │     #{..}.
Expression has type:   #{number() => number()}
Context expected type: #{number() => atom()}
   │     

Because in the expression's type:
  #{ number() =>
    Here the type is:     number()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{number() => number()} is not compatible with #{number() => atom()}
  the default associations are not compatible
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/t_maps.erl:41:5
   │
41 │     #{0 => zero, 1 => 2}.
   │     ^^^^^^^^^^^^^^^^^^^^
   │     │
   │     #{..}.
Expression has type:   #{number() => 'zero' | number()}
Context expected type: #{number() => atom()}
   │     

Because in the expression's type:
  #{ number() =>
    Here the type is a union type with some valid candidates: 'zero'
    However the following candidate: number()
    Differs from the expected type:  atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{number() => 'zero' | number()} is not compatible with #{number() => atom()}
  the default associations are not compatible
  because
  'zero' | number() is not compatible with atom()
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/t_maps.erl:56:5
   │
56 │     #{zero => 0, one => one}.
   │     ^^^^^^^^^^^^^^^^^^^^^^^^
   │     │
   │     #{..}.
Expression has type:   #{one := 'one', zero := number()}
Context expected type: #{one => number(), zero := number()}
   │     

Because in the expression's type:
  #{ one =>
    Here the type is:     'one'
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{one := 'one', zero := number()} is not compatible with #{one => number(), zero := number()}
  because
  at key `one`:
  #{one := 'one', zero := number()} is not compatible with #{one => number(), zero := number()}
  because
  'one' is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/t_maps.erl:80:5
   │
80 │     M#{}.
   │     ^ M.
Expression has type:   term()
Context expected type: #{term() => term()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:120:5
    │
120 │     S#{bar := true}.
    │     ^ S.
Expression has type:   term()
Context expected type: #{term() => term()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:130:25
    │
130 │ meet_dict2_neg(D, D) -> D.
    │                         ^
    │                         │
    │                         D.
Expression has type:   #{b() => term()}
Context expected type: #{n() => term()}
    │                         

Because in the expression's type:
  #{ map domains are incompatible:
    Here the type is:     boolean()
    Context expects type: n()
  , ... }

------------------------------ Detailed message ------------------------------

  #{b() => term()} is not compatible with #{n() => term()}
  the default associations are not compatible
  because
  b() is not compatible with n()
  because
  boolean() is not compatible with n()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:140:26
    │
140 │ meet_shape2_neg(S, S) -> S.
    │                          ^
    │                          │
    │                          S.
Expression has type:   #{a := b()}
Context expected type: #{a := n()}
    │                          

Because in the expression's type:
  #{ a =>
    Here the type is:     boolean()
    Context expects type: n()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := b()} is not compatible with #{a := n()}
  because
  at key `a`:
  #{a := b()} is not compatible with #{a := n()}
  because
  b() is not compatible with n()
  because
  boolean() is not compatible with n()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:145:26
    │
145 │ meet_shape3_neg(S, S) -> S.
    │                          ^
    │                          │
    │                          S.
Expression has type:   #{a := b()}
Context expected type: #{a => n()}
    │                          

Because in the expression's type:
  #{ a =>
    Here the type is:     boolean()
    Context expects type: n()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := b()} is not compatible with #{a => n()}
  because
  at key `a`:
  #{a := b()} is not compatible with #{a => n()}
  because
  b() is not compatible with n()
  because
  boolean() is not compatible with n()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:155:26
    │
155 │ meet_shape5_neg(S, S) -> S.
    │                          ^
    │                          │
    │                          S.
Expression has type:   #{a => b()}
Context expected type: #{a := b()}
    │                          

Because in the expression's type:
  Here the type is:     #{a => ..., ...}
  Context expects type: #{a := ..., ...}
  The type of the expression is missing the following required keys: a.

------------------------------ Detailed message ------------------------------

key `a` is declared as required in the latter but not in the former

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:165:1
    │
165 │ meet_shape7(S, S) -> S.
    │ ^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:202:5
    │
202 │     S#{K => V}.
    │     ^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{a := a(), n() => a()}
Context expected type: #{a() => a()}
    │     

Because in the expression's type:
  #{ map domains are incompatible:
    Here the type is:     number()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := a(), n() => a()} is not compatible with #{a() => a()}
  the default associations are not compatible
  because
  n() is not compatible with a()
  because
  number() is not compatible with a()
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:208:5
    │
208 │     S#{K => V}.
    │     ^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{a := a(), n() => a()}
Context expected type: #{n() => a()}
    │     

Because in the expression's type:
  #{ incompatible map key a:
    Here the type is:     'a'
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := a(), n() => a()} is not compatible with #{n() => a()}
  because
  #{a := a(), n() => a()} is not compatible with #{n() => a()}
  key `a` is declared in the former but not in the latter and key `a` isn't compatible with the default association of the latter map
  because
  'a' is not compatible with n()
  because
  'a' is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:216:5
    │
216 │     S#{K => V}.
    │     ^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{a := a(), n() => a()}
Context expected type: #{n() => a()}
    │     

Because in the expression's type:
  #{ incompatible map key a:
    Here the type is:     'a'
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a := a(), n() => a()} is not compatible with #{n() => a()}
  because
  #{a := a(), n() => a()} is not compatible with #{n() => a()}
  key `a` is declared in the former but not in the latter and key `a` isn't compatible with the default association of the latter map
  because
  'a' is not compatible with n()
  because
  'a' is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:224:5
    │
224 │     S#{K => V}.
    │     ^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{a => a(), n() => a()}
Context expected type: #{n() => a()}
    │     

Because in the expression's type:
  #{ incompatible map key a:
    Here the type is:     'a'
    Context expects type: number()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a => a(), n() => a()} is not compatible with #{n() => a()}
  because
  #{a => a(), n() => a()} is not compatible with #{n() => a()}
  key `a` is declared in the former but not in the latter and key `a` isn't compatible with the default association of the latter map
  because
  'a' is not compatible with n()
  because
  'a' is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:242:5
    │
242 │     FB#{foo := F1, bar := B1}.
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{bar := B1, foo := F1}
Context expected type: foo_bar(B1, F1)
    │     

Because in the expression's type:
  #{ bar =>
    Here the type is:     B1
    Context expects type: F1
  , ... }

------------------------------ Detailed message ------------------------------

  #{bar := B1, foo := F1} is not compatible with foo_bar(B1, F1)
  because
  #{bar := B1, foo := F1} is not compatible with #{bar := F1, foo := B1}
  because
  at key `bar`:
  #{bar := B1, foo := F1} is not compatible with #{bar := F1, foo := B1}
  because
  B1 is not compatible with F1

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:254:5
    │
254 │     FB#{foo => F1, bar => B1}.
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{bar := B1, foo := F1}
Context expected type: foo_bar_opt(B1, F1)
    │     

Because in the expression's type:
  #{ bar =>
    Here the type is:     B1
    Context expects type: F1
  , ... }

------------------------------ Detailed message ------------------------------

  #{bar := B1, foo := F1} is not compatible with foo_bar_opt(B1, F1)
  because
  #{bar := B1, foo := F1} is not compatible with #{bar => F1, foo => B1}
  because
  at key `bar`:
  #{bar := B1, foo := F1} is not compatible with #{bar => F1, foo => B1}
  because
  B1 is not compatible with F1

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:266:5
    │
266 │     Dict#{V2 => K2}.
    │     ^^^^^^^^^^^^^^^
    │     │
    │     ..#{..}.
Expression has type:   #{K1 | V2 => V1 | K2}
Context expected type: kv(K1 | K2, V1 | V2)
    │     

Because in the expression's type:
  #{ map domains are incompatible:
    Here the type is a union type with some valid candidates: K1
    However the following candidate: V2
    Differs from the expected type:  K1 | K2
  , ... }

------------------------------ Detailed message ------------------------------

  #{K1 | V2 => V1 | K2} is not compatible with kv(K1 | K2, V1 | V2)
  because
  #{K1 | V2 => V1 | K2} is not compatible with #{K1 | K2 => V1 | V2}
  the default associations are not compatible
  because
  K1 | V2 is not compatible with K1 | K2
  because
  V2 is not compatible with K1 | K2

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:283:19
    │
283 │     needs_shape_a(X#{b => hello}).
    │                   ^^^^^^^^^^^^^^
    │                   │
    │                   ..#{..}.
Expression has type:   #{a := number(), b := 'hello'}
Context expected type: #{a := term()}
    │                   

Because in the expression's type:
  Here the type is:     #{b := ...}
  Context expects type: #{...}
  The expected map has no corresponding key for: b.

------------------------------ Detailed message ------------------------------

key `b` is declared in the former but not in the latter and the latter map has no default association

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:307:22
    │
307 │         #{K := V} -> {K, V};
    │                      ^^^^^^
    │                      │
    │                      {K, V}.
Expression has type:   {a(), n()}
Context expected type: {n(), a()}
    │                      

Because in the expression's type:
  { 
    Here the type is:     atom()
    Context expects type: number()
  , n()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {a(), n()} is not compatible with {n(), a()}
  because
  a() is not compatible with n()
  because
  atom() is not compatible with n()
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:321:5
    │
321 │     {A, N}.
    │     ^^^^^^
    │     │
    │     {A, N}.
Expression has type:   {a(), n()}
Context expected type: {n(), a()}
    │     

Because in the expression's type:
  { 
    Here the type is:     atom()
    Context expects type: number()
  , n()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {a(), n()} is not compatible with {n(), a()}
  because
  a() is not compatible with n()
  because
  atom() is not compatible with n()
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:334:25
    │
334 │ to_map3_neg(#{} = M) -> M;
    │                         ^
    │                         │
    │                         M.
Expression has type:   #{V => K}
Context expected type: #{K => V}
    │                         

Because in the expression's type:
  #{ map domains are incompatible:
    Here the type is:     V
    Context expects type: K
  , ... }

------------------------------ Detailed message ------------------------------

  #{V => K} is not compatible with #{K => V}
  the default associations are not compatible
  because
  V is not compatible with K

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:351:25
    │
351 │ to_map5_neg(#{} = M) -> M.
    │                         ^
    │                         │
    │                         M.
Expression has type:   #{a() => n()} | #{n() => a()} | #{id => 'id' | 'no_id'}
Context expected type: #{a() | n() => a()}
    │                         

Because in the expression's type:
  The type is a union type with some valid candidates: #{n() => a()} | #{id => 'id' | 'no_id'}
  However, the following candidate doesn't match:
  #{ a() =>
    Here the type is:     number()
    Context expects type: atom()
  , ... }

------------------------------ Detailed message ------------------------------

  #{a() => n()} | #{n() => a()} | #{id => 'id' | 'no_id'} is not compatible with #{a() | n() => a()}
  because
  #{a() => n()} is not compatible with #{a() | n() => a()}
  the default associations are not compatible
  because
  n() is not compatible with a()
  because
  number() is not compatible with a()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:356:1
    │
356 │ no_map(#{} = M) -> M.
    │ ^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:361:1
    │
361 │ no_prop(#{foo := V}) -> V.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:377:22
    │
377 │         #{K := V} -> {K, V};
    │                      ^^^^^^
    │                      │
    │                      {K, V}.
Expression has type:   {'a' | 'b', a()}
Context expected type: {n(), a()}
    │                      

Because in the expression's type:
  { 
    Here the type is:     'a' | 'b'
    Context expects type: number()
    No candidate of the expression's type matches the expected type.
  , a()}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {'a' | 'b', a()} is not compatible with {n(), a()}
  because
  'a' | 'b' is not compatible with n()
  because
  'a' | 'b' is not compatible with number()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:429:1
    │
429 │ val3(#{a := V}) -> V.
    │ ^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:434:1
    │
434 │ val4(#{a := V}) -> V.
    │ ^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:451:1
    │
451 │ guard2(M) when is_map(M) -> M.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:493:1
    │
493 │ update_none1(N) -> N#{a := 1}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/t_maps.erl:496:1
    │
496 │ update_none2(N) -> N#{a => 1}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:508:17
    │
508 │ sub_3_neg(M) -> M.
    │                 ^
    │                 │
    │                 M.
Expression has type:   #{a := atom()}
Context expected type: #{a => atom(), n := number()}
    │                 

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: #{n := ..., ...}
  The type of the expression is missing the following required keys: n.

------------------------------ Detailed message ------------------------------

key `n` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:536:5
    │
536 │     maps:update_with(a, F, a, Map).
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │     │
    │     maps:update_with('a', F, 'a', Map).
Expression has type:   #{a => 'b' | 'c' | 'a'}
Context expected type: #{a => 'b' | 'c'}
    │     

Because in the expression's type:
  #{ a =>
    Here the type is a union type with some valid candidates: 'b' | 'c'
    However the following candidate: 'a'
    Differs from the expected type:  'b' | 'c'
  , ... }

------------------------------ Detailed message ------------------------------

  #{a => 'b' | 'c' | 'a'} is not compatible with #{a => 'b' | 'c'}
  because
  at key `a`:
  #{a => 'b' | 'c' | 'a'} is not compatible with #{a => 'b' | 'c'}
  because
  'b' | 'c' | 'a' is not compatible with 'b' | 'c'
  because
  'a' is not compatible with 'b' | 'c'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:571:5
    │
571 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   rec_shape()
Context expected type: rec_shape_v2()
    │     

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: #{item_v2 := ..., ...}
  The type of the expression is missing the following required keys: item_v2.

------------------------------ Detailed message ------------------------------

  rec_shape() is not compatible with rec_shape_v2()
  because
  #{item := rec_shape() | 'undefined'} is not compatible with rec_shape_v2()
  because
  #{item := rec_shape() | 'undefined'} is not compatible with #{item_v2 := rec_shape_v2() | 'undefined'}
  key `item_v2` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:629:5
    │
629 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   gen_shape('a' | 'b')
Context expected type: 'a' | #{item := 'a' | #{item := 'a' | gen_shape('a')}}
    │     

Because in the expression's type:
  #{ item =>
    Here the type is a union type with some valid candidates: 'a'
    However the following candidate: 'b'
    Differs from the expected type:  'a' | #{item := 'a' | gen_shape('a')}
  , ... }

------------------------------ Detailed message ------------------------------

  gen_shape('a' | 'b') is not compatible with 'a' | #{item := 'a' | #{item := 'a' | gen_shape('a')}}
  because
  #{item := 'a' | 'b' | gen_shape('a' | 'b')} is not compatible with 'a' | #{item := 'a' | #{item := 'a' | gen_shape('a')}}
  because
  #{item := 'a' | 'b' | gen_shape('a' | 'b')} is not compatible with 'a'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:641:5
    │
641 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   gen_shape_v2('a')
Context expected type: gen_shape('a')
    │     

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: #{item := ..., ...}
  The type of the expression is missing the following required keys: item.

------------------------------ Detailed message ------------------------------

  gen_shape_v2('a') is not compatible with gen_shape('a')
  because
  #{item_v2 := 'a' | gen_shape_v2('a')} is not compatible with gen_shape('a')
  because
  #{item_v2 := 'a' | gen_shape_v2('a')} is not compatible with #{item := 'a' | gen_shape('a')}
  key `item` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:648:5
    │
648 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{a => 'va', b => 'vb', c => 'vc', d => 'vd'}
Context expected type: #{a => 'va', b => 'vb', c => 'vc'}
    │     

Because in the expression's type:
  Here the type is:     #{d => ...}
  Context expects type: #{...}
  The expected map has no corresponding key for: d.

------------------------------ Detailed message ------------------------------

key `d` is declared in the former but not in the latter and the latter map has no default association

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:661:5
    │
661 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{a => 'va', b => 'vb', c => 'vc', d => 'vd', e => 've'}
Context expected type: #{a => 'ka', b => 'kb', c => 'kc'}
    │     

Because in the expression's type:
  #{ a =>
    Here the type is:     'va'
    Context expects type: 'ka'
  , ... }

------------------------------ Detailed message ------------------------------

  #{a => 'va', b => 'vb', c => 'vc', d => 'vd', e => 've'} is not compatible with #{a => 'ka', b => 'kb', c => 'kc'}
  because
  at key `a`:
  #{a => 'va', b => 'vb', c => 'vc', d => 'vd', e => 've'} is not compatible with #{a => 'ka', b => 'kb', c => 'kc'}
  because
  'va' is not compatible with 'ka'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:675:5
    │
675 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{}
Context expected type: #{a => 'va', b => 'vb', c := 'vc'}
    │     

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: #{c := ..., ...}
  The type of the expression is missing the following required keys: c.

------------------------------ Detailed message ------------------------------

key `c` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:682:5
    │
682 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{a => 'ka', b => 'kb', c => 'kc'}
Context expected type: #{a => 'ka', b := 'kb', c => 'kc'}
    │     

Because in the expression's type:
  Here the type is:     #{b => ..., ...}
  Context expects type: #{b := ..., ...}
  The type of the expression is missing the following required keys: b.

------------------------------ Detailed message ------------------------------

key `b` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:689:5
    │
689 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{a => 'ka', b => 'kb', c => 'kc'}
Context expected type: #{a => 'ka', b := 'kb', c => 'kc'}
    │     

Because in the expression's type:
  Here the type is:     #{b => ..., ...}
  Context expects type: #{b := ..., ...}
  The type of the expression is missing the following required keys: b.

------------------------------ Detailed message ------------------------------

key `b` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:710:5
    │
710 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   #{k_extra => term(), k_ok => term(), k_req1 => term(), k_req2 => term(), k_wrong1 => pid(), k_wrong2 => pid()}
Context expected type: #{k_ok => term(), k_req1 := atom(), k_req2 := atom(), k_req3 := atom(), k_wrong1 => atom(), k_wrong2 => atom()}
    │     

Because in the expression's type:
  Here the type is:     #{k_req2 => ..., k_req1 => ..., ...}
  Context expects type: #{k_req3 := ..., k_req2 := ..., k_req1 := ..., ...}
  The type of the expression is missing the following required keys: k_req3, k_req2, k_req1.

------------------------------ Detailed message ------------------------------

keys `k_req1`, `k_req2`, `k_req3` are declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:732:27
    │
732 │ dict_to_shape_neg_1(M) -> M.
    │                           ^
    │                           │
    │                           M.
Expression has type:   #{'a' | 'b' => boolean()}
Context expected type: #{a => 'true', b => boolean()}
    │                           

Because in the expression's type:
  Here the type is:     #{'a' | 'b' => boolean()}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{'a' | 'b' => boolean()} is not compatible with #{a => 'true', b => boolean()}
  key a is not present in the former map but is incompatible with its default association
  because
  boolean() is not compatible with 'true'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:737:27
    │
737 │ dict_to_shape_neg_2(M) -> M.
    │                           ^
    │                           │
    │                           M.
Expression has type:   #{'a' | 'b' => boolean()}
Context expected type: #{a => boolean(), b := term()}
    │                           

Because in the expression's type:
  Here the type is:     #{...}
  Context expects type: #{b := ..., ...}
  The type of the expression is missing the following required keys: b.

------------------------------ Detailed message ------------------------------

key `b` is declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/t_maps.erl:742:27
    │
742 │ dict_to_shape_neg_3(M) -> M.
    │                           ^
    │                           │
    │                           M.
Expression has type:   #{'a' | 'b' => boolean()}
Context expected type: #{a => boolean()}
    │                           

Because in the expression's type:
  Here the type is:     #{'a' | 'b' => boolean()}
  Context expects type: #{...} (no default association)
  The expected map has no default association while the type of the expression has one.

------------------------------ Detailed message ------------------------------

  #{'a' | 'b' => boolean()} is not compatible with #{a => boolean()}
  because
  #{'a' | 'b' => boolean()} is not compatible with #{a => boolean()}
  the latter map has no default association while the first map has one

44 ERRORS
