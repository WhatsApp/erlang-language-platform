error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:46:23
   │
46 │ test03_neg(-4 = X) -> X.
   │                       ^ X.
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:49:26
   │
49 │ test04_neg(6 / 3 = Y) -> Y.
   │                          ^ Y.
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:52:20
   │
52 │ test05_neg(X) -> + X.
   │                    ^ X.
Expression has type:   term()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:55:36
   │
55 │ test06_neg(X) when is_number(X) -> + X.
   │                                    ^^^ + _.
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:63:5
   │
63 │     not X.
   │     ^^^^^ not _.
Expression has type:   boolean()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:73:25
   │
73 │     is_number(X) -> X + Y.
   │                         ^ Y.
Expression has type:   term()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:77:21
   │
77 │ test11_neg(X, Y) -> X + Y.
   │                     ^^^^^ _ + _.
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:81:19
   │
81 │ test12_neg(X) -> -X.
   │                   ^ X.
Expression has type:   atom()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:85:21
   │
85 │ test13_neg(X, Y) -> X or Y.
   │                     ^ X.
Expression has type:   term()
Context expected type: boolean()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:85:26
   │
85 │ test13_neg(X, Y) -> X or Y.
   │                          ^ Y.
Expression has type:   term()
Context expected type: boolean()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/misc.erl:97:21
   │
97 │ test16_neg(X, Y) -> X or Y.
   │                     ^^^^^^ _ or _.
Expression has type:   boolean()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:101:26
    │
101 │ test17_neg(X, Y) -> X or Y.
    │                          ^ Y.
Expression has type:   atom()
Context expected type: boolean()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:105:21
    │
105 │ test18_neg(X, Y) -> X orelse Y.
    │                     ^^^^^^^^^^ _ orelse _.
Expression has type:   atom()
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:109:21
    │
109 │ test19_neg(X, Y) -> X andalso Y.
    │                     ^^^^^^^^^^^ _ andalso _.
Expression has type:   'false' | number()
Context expected type: {number()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:112:18
    │
112 │ test20_neg(X) -> [- X].
    │                  ^^^^^
    │                  │
    │                  [- _].
Expression has type:   [number()]
Context expected type: [atom()]
    │                  

Because in the expression's type:
  [
    Here the type is:     number()
    Context expects type: atom()
  ]

------------------------------ Detailed message ------------------------------

  [number()] is not compatible with [atom()]
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:116:21
    │
116 │ test21_neg(X, Y) -> [X / Y].
    │                     ^^^^^^^
    │                     │
    │                     [_ / _].
Expression has type:   [number()]
Context expected type: [atom()]
    │                     

Because in the expression's type:
  [
    Here the type is:     number()
    Context expects type: atom()
  ]

------------------------------ Detailed message ------------------------------

  [number()] is not compatible with [atom()]
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:120:18
    │
120 │ test22_neg(X) -> [not X].
    │                  ^^^^^^^
    │                  │
    │                  [not _].
Expression has type:   [boolean()]
Context expected type: [number()]
    │                  

Because in the expression's type:
  [
    Here the type is:     boolean()
    Context expects type: number()
  ]

------------------------------ Detailed message ------------------------------

  [boolean()] is not compatible with [number()]
  because
  boolean() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:124:21
    │
124 │ test23_neg(X, Y) -> [X or Y].
    │                     ^^^^^^^^
    │                     │
    │                     [_ or _].
Expression has type:   [boolean()]
Context expected type: [number()]
    │                     

Because in the expression's type:
  [
    Here the type is:     boolean()
    Context expects type: number()
  ]

------------------------------ Detailed message ------------------------------

  [boolean()] is not compatible with [number()]
  because
  boolean() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:128:21
    │
128 │ test24_neg(X, Y) -> [X orelse Y].
    │                     ^^^^^^^^^^^^
    │                     │
    │                     [_ orelse _].
Expression has type:   [atom()]
Context expected type: [number()]
    │                     

Because in the expression's type:
  [
    Here the type is:     atom()
    Context expects type: number()
  ]

------------------------------ Detailed message ------------------------------

  [atom()] is not compatible with [number()]
  because
  atom() is not compatible with number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:143:29
    │
143 │ test28_neg(B) -> boolean_id(B).
    │                             ^ B.
Expression has type:   atom()
Context expected type: boolean()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:146:17
    │
146 │ test29_neg() -> [true, false].
    │                 ^^^^^^^^^^^^^
    │                 │
    │                 ['true', 'false'].
Expression has type:   ['true' | 'false']
Context expected type: []
    │                 

Because in the expression's type:
  [
    Here the type is:     'true' | 'false'
    Context expects type: none()
    No candidate of the expression's type matches the expected type.
  ]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:149:17
    │
149 │ test30_neg() -> 1.
    │                 ^ 1.
Expression has type:   number()
Context expected type: 'atom'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:152:17
    │
152 │ test31_neg() -> fun test30_neg/0.
    │                 ^^^^^^^^^^^^^^^^ test30_neg/0.
Expression has type:   fun(() -> 'atom')
Context expected type: 'atom'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:155:17
    │
155 │ test32_neg() -> fun misc_lib:boolean_id/1.
    │                 ^^^^^^^^^^^^^^^^^^^^^^^^^ misc_lib:boolean_id/1.
Expression has type:   fun((boolean()) -> boolean())
Context expected type: 'atom'

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:192:1
    │
192 │ test40_pos({X, Y}) -> {X, Y}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:196:1
    │
196 │ test41_pos([X | Y]) -> {X, Y}.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:204:1
    │
204 │ test43_pos([_ | Y]) when Y + 1 > 0 -> Y.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:221:17
    │
221 │ test46_neg() -> false.
    │                 ^^^^^ 'false'.
Expression has type:   'false'
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:224:17
    │
224 │ test47_neg() -> [].
    │                 ^^ [].
Expression has type:   []
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:227:17
    │
227 │ test48_neg() -> test47_neg().
    │                 ^^^^^^^^^^^^ test47_neg().
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:230:17
    │
230 │ test49_neg() -> misc:test47_neg().
    │                 ^^^^^^^^^^^^^^^^^ misc:test47_neg().
Expression has type:   number()
Context expected type: atom()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:337:1
    │
337 │ test68_pos({E, _}) -> E.
    │ ^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:352:22
    │
352 │     catch test69_pos(atom).
    │                      ^^^^
    │                      │
    │                      'atom'.
Expression has type:   'atom'
Context expected type: [atom()] | [number()]
    │                      

  'atom' is not compatible with [atom()] | [number()]
  because
  'atom' is not compatible with [atom()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:357:22
    │
357 │     catch test69_pos(atom).
    │                      ^^^^
    │                      │
    │                      'atom'.
Expression has type:   'atom'
Context expected type: [atom()] | [number()]
    │                      

  'atom' is not compatible with [atom()] | [number()]
  because
  'atom' is not compatible with [atom()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:404:11
    │
404 │     after Timeout ->
    │           ^^^^^^^ Timeout.
Expression has type:   term()
Context expected type: timeout()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:412:11
    │
412 │     after Timeout ->
    │           ^^^^^^^ Timeout.
Expression has type:   term()
Context expected type: timeout()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:424:5
    │
424 │     {Msg}.
    │     ^^^^^ {Msg}.
Expression has type:   {'default' | dynamic('atom')}
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:453:5
    │
453 │     {[H1|T1], [H2|T2]}.
    │     ^^^^^^^^^^^^^^^^^^
    │     │
    │     {[H1 | T1], [H2 | T2]}.
Expression has type:   {[number() | atom()], [atom() | number()]}
Context expected type: {[atom()], [number()]}
    │     

Because in the expression's type:
  { 
    [
      Here the type is a union type with some valid candidates: atom()
      However the following candidate: number()
      Differs from the expected type:  atom()
    ]
  , [atom() | number()]}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {[number() | atom()], [atom() | number()]} is not compatible with {[atom()], [number()]}
  because
  [number() | atom()] is not compatible with [atom()]
  because
  number() | atom() is not compatible with atom()
  because
  number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:461:5
    │
461 │     {[H1|T1], [H2|T2]}.
    │     ^^^^^^^^^^^^^^^^^^
    │     │
    │     {[H1 | T1], [H2 | T2]}.
Expression has type:   {[atom() | number()], [atom() | number()]}
Context expected type: {[atom()] | [number()], [atom()] | [number()]}
    │     

Because in the expression's type:
  { 
    [
      Here the type is a union type with some valid candidates: atom()
      However the following candidate: number()
      Differs from the expected type:  atom()
    ]
  , [atom() | number()]}

------------------------------ Detailed message ------------------------------

  at tuple index 1:
  {[atom() | number()], [atom() | number()]} is not compatible with {[atom()] | [number()], [atom()] | [number()]}
  because
  [atom() | number()] is not compatible with [atom()] | [number()]
  because
  [atom() | number()] is not compatible with [atom()]
  because
  atom() | number() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:465:12
    │
465 │     X = [1 | 2],
    │            ^^^^ 2.
Expression has type:   number()
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:472:21
    │
472 │ comp01_neg(X, Y) -> X < Y.
    │                     ^^^^^ _ < _.
Expression has type:   boolean()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:482:5
    │
482 │     Res.
    │     ^^^ Res.
Expression has type:   boolean()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:497:5
    │
497 │     Where ! What.
    │     ^^^^^^^^^^^^ _ ! _.
Expression has type:   term()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:507:20
    │
507 │     #str_box{str = Str}.
    │                    ^^^ Str.
Expression has type:   atom()
Context expected type: string()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:513:17
    │
513 │ string_neg() -> "str".
    │                 ^^^^^ string_lit.
Expression has type:   string()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:538:5
    │
538 │     Atom.
    │     ^^^^ Atom.
Expression has type:   string()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:555:5
    │
555 │     Atoms ++ Numbers.
    │     ^^^^^^^^^^^^^^^^
    │     │
    │     _ ++ _.
Expression has type:   [atom() | binary()]
Context expected type: [atom() | number()]
    │     

Because in the expression's type:
  [
    Here the type is a union type with some valid candidates: atom()
    However the following candidate: binary()
    Differs from the expected type:  atom() | number()
  ]

------------------------------ Detailed message ------------------------------

  [atom() | binary()] is not compatible with [atom() | number()]
  because
  atom() | binary() is not compatible with atom() | number()
  because
  binary() is not compatible with atom() | number()
  because
  binary() is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:575:14
    │
575 │     Atoms -- Anys.
    │              ^^^^ Anys.
Expression has type:   term()
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:581:5
    │
581 │     Anys ++ Atoms.
    │     ^^^^ Anys.
Expression has type:   term()
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:599:23
    │
599 │ start_neg([] ++ X) -> X.
    │                       ^
    │                       │
    │                       X.
Expression has type:   [A]
Context expected type: [[A]]
    │                       

Because in the expression's type:
  [
    Here the type is:     A
    Context expects type: [A]
  ]

------------------------------ Detailed message ------------------------------

  [A] is not compatible with [[A]]
  because
  A is not compatible with [A]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:611:21
    │
611 │ ss2_neg("" ++ S) -> S.
    │                     ^ S.
Expression has type:   [atom() | number()]
Context expected type: string()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:615:1
    │
615 │ ss3("b" ++ S) -> S.
    │ ^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:632:5
    │
632 │     X.
    │     ^ X.
Expression has type:   term()
Context expected type: number()

error: bad_map_key (See https://fb.me/eqwalizer_errors#bad_map_key)
    ┌─ check/src/misc.erl:641:5
    │
641 │     atom() := atom(),
    │     ^^^^^^^^^^^^^^ Map type will be approximated to #{dynamic() => dynamic()}, suppressing potential errors.
Use => instead of := here. Required map key should always be composed of statically defined atoms or tuples.

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:644:15
    │
644 │ badspec(_) -> ok.
    │               ^^ 'ok'.
Expression has type:   'ok'
Context expected type: #{dynamic() => dynamic()}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:648:21
    │
648 │     catch lists:map({}, {}).
    │                     ^^ {}.
Expression has type:   {}
Context expected type: fun((A) -> B)

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:648:21
    │
648 │     catch lists:map({}, {}).
    │                     ^^ {}.
Expression has type:   {}
Context expected type: fun((dynamic()) -> dynamic())

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:648:25
    │
648 │     catch lists:map({}, {}).
    │                         ^^ {}.
Expression has type:   {}
Context expected type: [A]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:648:25
    │
648 │     catch lists:map({}, {}).
    │                         ^^ {}.
Expression has type:   {}
Context expected type: [dynamic()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:652:26
    │
652 │     X = (catch lists:map({}, {})),
    │                          ^^ {}.
Expression has type:   {}
Context expected type: fun((A) -> B)

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:652:26
    │
652 │     X = (catch lists:map({}, {})),
    │                          ^^ {}.
Expression has type:   {}
Context expected type: fun((dynamic()) -> dynamic())

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:652:30
    │
652 │     X = (catch lists:map({}, {})),
    │                              ^^ {}.
Expression has type:   {}
Context expected type: [A]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:652:30
    │
652 │     X = (catch lists:map({}, {})),
    │                              ^^ {}.
Expression has type:   {}
Context expected type: [dynamic()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:671:5
    │
671 │     [X, 1, 2, 3 | Y].
    │     ^^^^^^^^^^^^^^^^ [X, 1, 2, 3 | Y].
Expression has type:   [number() | dynamic()]
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:671:17
    │
671 │     [X, 1, 2, 3 | Y].
    │                 ^^^^ Y.
Expression has type:   number()
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:676:5
    │
676 │     [X, 1, 2, 3 | an_atom].
    │     ^^^^^^^^^^^^^^^^^^^^^^ [X, 1, 2, 3 | 'an_atom'].
Expression has type:   [number() | dynamic()]
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:676:17
    │
676 │     [X, 1, 2, 3 | an_atom].
    │                 ^^^^^^^^^^ 'an_atom'.
Expression has type:   'an_atom'
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:681:23
    │
681 │     Res = [X, 1, 2, 3 | an_atom],
    │                       ^^^^^^^^^^ 'an_atom'.
Expression has type:   'an_atom'
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:682:5
    │
682 │     Res.
    │     ^^^ Res.
Expression has type:   [number() | dynamic()]
Context expected type: pid()

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:685:1
    │
685 │ not_list1_neg("atom" ++ A) -> A.
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:689:1
    │  
689 │ ╭ not_list2_neg
690 │ │     (A, [_ | A]) -> A.
    │ ╰─────────────────────^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:694:1
    │  
694 │ ╭ not_list3_neg
695 │ │     (A, "atom" ++ A) -> A.
    │ ╰─────────────────────────^ Clause is not covered by spec

error: clause_not_covered (See https://fb.me/eqwalizer_errors#clause_not_covered)
    ┌─ check/src/misc.erl:728:1
    │  
728 │ ╭ test91_neg(None) ->
729 │ │     Res = {None, err},
730 │ │     Res.
    │ ╰───────^ Clause is not covered by spec

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:730:5
    │
730 │     Res.
    │     ^^^
    │     │
    │     Res.
Expression has type:   {none(), 'err'}
Context expected type: {'ok', 'ok'}
    │     

Because in the expression's type:
  { none(), 
    Here the type is:     'err'
    Context expects type: 'ok'
  }

------------------------------ Detailed message ------------------------------

  at tuple index 2:
  {none(), 'err'} is not compatible with {'ok', 'ok'}
  because
  'err' is not compatible with 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:741:5
    │
741 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   v2_op()
Context expected type: v1_op()
    │     

Because in the expression's type:
  Here the type is a union type with some valid candidates: v1_op()
  However the following candidate: 'v2_op'
  Differs from the expected type:  'v1_op1' | 'v1_op2' | stuff() | v0_op()

------------------------------ Detailed message ------------------------------

  v2_op() is not compatible with v1_op()
  because
  'v2_op' | v1_op() is not compatible with v1_op()
  because
  'v2_op' | v1_op() is not compatible with 'v1_op1' | 'v1_op2' | stuff() | v0_op()
  because
  'v2_op' is not compatible with 'v1_op1' | 'v1_op2' | stuff() | v0_op()

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/misc.erl:760:1
    │
760 │ -opaque o_cycle() :: opaque:o_cycle().
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type o_cycle/0 is not productive

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/misc.erl:762:1
    │  
762 │ ╭ -spec use_o_cycle1(misc:o_cycle()) ->
763 │ │     opaque:o_cycle().
    │ ╰────────────────────^ use_o_cycle1/1 references types with invalid definitions: o_cycle/0, opaque:o_cycle/0

error: reference_to_invalid_type (See https://fb.me/eqwalizer_errors#reference_to_invalid_type)
    ┌─ check/src/misc.erl:766:1
    │  
766 │ ╭ -spec use_o_cycle2(opaque:o_cycle()) ->
767 │ │     misc:o_cycle().
    │ ╰──────────────────^ use_o_cycle2/1 references types with invalid definitions: o_cycle/0, opaque:o_cycle/0

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
    ┌─ check/src/misc.erl:783:1
    │  
783 │ ╭ -type x_cycle() ::
784 │ │     recursive_aliases:x_cycle().
    │ ╰───────────────────────────────^ recursive type x_cycle/0 is not productive

error: unknown_id (See https://fb.me/eqwalizer_errors#unknown_id)
    ┌─ check/src/misc.erl:790:21
    │
790 │     opaque:opair(a, x:y())) ->
    │                     ^^^^^ Unknown id: x:y/0

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:797:13
    │
797 │ names(X) -> X.
    │             ^
    │             │
    │             X.
Expression has type:   misc:set()
Context expected type: sets:set()
    │             

Because in the expression's type:
  Here the type is:     []
  Context expects type: #set{} | #{term() => []}
  No candidate matches in the expected union.

------------------------------ Detailed message ------------------------------

  misc:set() is not compatible with sets:set()
  because
  [] is not compatible with sets:set()
  because
  [] is not compatible with sets:set(term())
  because
  [] is not compatible with #set{} | #{term() => []}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:850:5
    │
850 │     {ok, lists, 1.0}.
    │     ^^^^^^^^^^^^^^^^
    │     │
    │     {'ok', 'lists', float_lit}.
Expression has type:   {'ok', 'lists', number()}
Context expected type: {'ok', atom(), pid()}
    │     

Because in the expression's type:
  { 'ok', 'lists', 
    Here the type is:     number()
    Context expects type: pid()
  }

------------------------------ Detailed message ------------------------------

  at tuple index 3:
  {'ok', 'lists', number()} is not compatible with {'ok', atom(), pid()}
  because
  number() is not compatible with pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:860:5
    │
860 │     Mod.
    │     ^^^ Mod.
Expression has type:   atom()
Context expected type: 'wrong_ret'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:875:5
    │
875 │     Arity.
    │     ^^^^^ Arity.
Expression has type:   number()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:887:5
    │
887 │     Node.
    │     ^^^^ Node.
Expression has type:   atom()
Context expected type: pid()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:929:16
    │
929 │ iovec_neg() -> {<<>>}.
    │                ^^^^^^
    │                │
    │                {<<..>>}.
Expression has type:   {binary()}
Context expected type: erlang:iovec()
    │                

Because in the expression's type:
  Here the type is:     {binary()}
  Context expects type: [binary()]

------------------------------ Detailed message ------------------------------

  {binary()} is not compatible with erlang:iovec()
  because
  {binary()} is not compatible with [binary()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:949:15
    │
949 │ n_a_neg(N) -> N.
    │               ^ N.
Expression has type:   number()
Context expected type: atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:965:5
    │
965 │     MyPriorities.
    │     ^^^^^^^^^^^^
    │     │
    │     MyPriorities.
Expression has type:   ['MM' | 'MS' | 'EE' | 'MA' | 'GE']
Context expected type: [erlang:priority_level()]
    │     

Because in the expression's type:
  [
    Here the type is:     'MM' | 'MS' | 'EE' | 'MA' | 'GE'
    Context expects type: 'low' | 'normal' | 'high' | 'max'
    No candidate of the expression's type matches the expected type.
  ]

------------------------------ Detailed message ------------------------------

  ['MM' | 'MS' | 'EE' | 'MA' | 'GE'] is not compatible with [erlang:priority_level()]
  because
  'MM' | 'MS' | 'EE' | 'MA' | 'GE' is not compatible with erlang:priority_level()
  because
  'MM' | 'MS' | 'EE' | 'MA' | 'GE' is not compatible with 'low' | 'normal' | 'high' | 'max'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:971:5
    │
971 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   erlang:timestamp()
Context expected type: atom()
    │     

Because in the expression's type:
  Here the type is:     {number(), number(), number()}
  Context expects type: atom()

------------------------------ Detailed message ------------------------------

  erlang:timestamp() is not compatible with atom()
  because
  {number(), number(), number()} is not compatible with atom()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/misc.erl:987:12
    │
987 │     Res = (Flag orelse Pid),
    │            ^^^^ Flag.
Expression has type:   atom()
Context expected type: boolean()

error: expected_fun_type (See https://fb.me/eqwalizer_errors#expected_fun_type)
     ┌─ check/src/misc.erl:1005:20
     │
1005 │             orelse Validator(),
     │                    ^^^^^^^^^ Validator.
Expected fun type with arity 0
Got: 'undefined'

error: non_exported_id (See https://fb.me/eqwalizer_errors#non_exported_id)
     ┌─ check/src/misc.erl:1008:23
     │
1008 │ -spec non_exported_id(any_fun_type:f1()) -> any_fun_type:f1().
     │                       ^^^^^^^^^^^^^^^^^ Type exists but is not exported: any_fun_type:f1/0

error: non_exported_id (See https://fb.me/eqwalizer_errors#non_exported_id)
     ┌─ check/src/misc.erl:1011:30
     │
1011 │ -type non_exported_id_t() :: any_fun_type:f1().
     │                              ^^^^^^^^^^^^^^^^^ Type exists but is not exported: any_fun_type:f1/0

93 ERRORS
