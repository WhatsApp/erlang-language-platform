error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/otp_opaques.erl:18:5
   │
18 │     gb_sets:from_list(Atoms).
   │     ^^^^^^^^^^^^^^^^^^^^^^^^
   │     │
   │     gb_sets:from_list(Atoms).
Expression has type:   gb_sets:set(atom())
Context expected type: gb_sets:set(number())
   │     

Because in the expression's type:
  { number(), 
    { 
      Here the type is:     atom()
      Context expects type: number()
    , term(), term()}
  }

------------------------------ Detailed message ------------------------------

  gb_sets:set(atom()) is not compatible with gb_sets:set(number())
  because
  {number(), gb_sets:gb_set_node(atom())} is not compatible with gb_sets:set(number())
  because
  at tuple index 2:
  {number(), gb_sets:gb_set_node(atom())} is not compatible with {number(), gb_sets:gb_set_node(number())}
  because
  gb_sets:gb_set_node(atom()) is not compatible with gb_sets:gb_set_node(number())

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/otp_opaques.erl:42:5
   │
42 │     List.
   │     ^^^^
   │     │
   │     List.
Expression has type:   [[A]]
Context expected type: [A]
   │     

Because in the expression's type:
  [
    Here the type is:     [A]
    Context expects type: A
  ]

------------------------------ Detailed message ------------------------------

  [[A]] is not compatible with [A]
  because
  [A] is not compatible with A

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ check/src/otp_opaques.erl:99:17
   │
99 │ test3_neg(X) -> X.
   │                 ^
   │                 │
   │                 X.
Expression has type:   maps:iterator('k', 'v')
Context expected type: sets:set('a')
   │                 

Because in the expression's type:
  Here the type is:     tuple()/3 | 'none' | [...] | [...]
  Context expects type: #set{} | #{a => []}
  No candidate of the expression's type matches the expected type.

------------------------------ Detailed message ------------------------------

  maps:iterator('k', 'v') is not compatible with sets:set('a')
  because
  {'k', 'v', maps:iterator('k', 'v')} | 'none' | [number()] | [['k']] is not compatible with sets:set('a')
  because
  {'k', 'v', maps:iterator('k', 'v')} | 'none' | [number()] | [['k']] is not compatible with #set{} | #{a => []}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/otp_opaques.erl:102:13
    │
102 │ ts(X, X) -> X.
    │             ^ X.
Expression has type:   #set{} | #{a => []}
Context expected type: T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ check/src/otp_opaques.erl:107:11
    │
107 │     ts(X, X),
    │           ^
    │           │
    │           X.
Expression has type:   maps:iterator('k', 'v')
Context expected type: sets:set('a')
    │           

Because in the expression's type:
  Here the type is:     tuple()/3 | 'none' | [...] | [...]
  Context expects type: #set{} | #{a => []}
  No candidate of the expression's type matches the expected type.

------------------------------ Detailed message ------------------------------

  maps:iterator('k', 'v') is not compatible with sets:set('a')
  because
  {'k', 'v', maps:iterator('k', 'v')} | 'none' | [number()] | [['k']] is not compatible with sets:set('a')
  because
  {'k', 'v', maps:iterator('k', 'v')} | 'none' | [number()] | [['k']] is not compatible with #set{} | #{a => []}

error: expected_fun_type (See https://fb.me/eqwalizer_errors#expected_fun_type)
    ┌─ check/src/otp_opaques.erl:124:5
    │
124 │     X().
    │     ^ X.
Expected fun type with arity 0
Got: maps:iterator('k', 'v') | sets:set('a')

error: expected_fun_type (See https://fb.me/eqwalizer_errors#expected_fun_type)
    ┌─ check/src/otp_opaques.erl:130:5
    │
130 │     X().
    │     ^ X.
Expected fun type with arity 0
Got: sets:set('a')

7 ERRORS
