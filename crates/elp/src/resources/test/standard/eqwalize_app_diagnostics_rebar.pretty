error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/src/app_a.erl:10:5
   │
10 │     ?OK.
   │     ^^^ 'error'.
Expression has type:   'error'
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/src/app_a.erl:14:5
   │
14 │     error.
   │     ^^^^^ 'error'.
Expression has type:   'error'
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/src/app_a.erl:18:13
   │
18 │     _ = 3 * an_atom, ok.
   │             ^^^^^^^ 'an_atom'.
Expression has type:   'an_atom'
Context expected type: number()

error: redundant_fixme (See https://fb.me/eqwalizer_errors#redundant_fixme)
   ┌─ app_a/src/app_a.erl:56:5
   │
56 │     % eqwalizer:fixme redundant issue should be reported
   │     ^^^^^^^^^^^^^^^^^ redundant fixme

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/src/app_a.erl:78:5
   │
78 │     X.
   │     ^
   │     │
   │     X.
Expression has type:   #{k_extra => term(), k_ok => term(), k_req1 => term(), k_req2 => term(), k_wrong1 => pid(), k_wrong2 => pid()}
Context expected type: #{k_ok => term(), k_req1 := atom(), k_req2 := atom(), k_req3 := atom(), k_wrong1 => atom(), k_wrong2 => atom()}
   │     

Because in the expression's type:
  Here the type is:     #{k_req2 => ..., k_req1 => ..., ...}
  Context expects type: #{k_req3 := ..., k_req2 := ..., k_req1 := ..., ...}
  The type of the expression is missing the following required keys: k_req3, k_req2, k_req1.

------------------------------ Detailed message ------------------------------

keys `k_req1`, `k_req2`, `k_req3` are declared as required in the latter but not in the former

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ app_a/src/app_a.erl:102:5
    │
102 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   id(#{a := 'va', b := #{c := #{d => atom()}}})
Context expected type: #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
    │     

Because in the expression's type:
  #{ b =>
    #{ c =>
      Here the type is:     #{d => ..., ...}
      Context expects type: #{d := ..., e := ..., ...}
      The type of the expression is missing the following required keys: d, e.
    , ... }
  , ... }

------------------------------ Detailed message ------------------------------

  id(#{a := 'va', b := #{c := #{d => atom()}}}) is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  #{a := 'va', b := #{c := #{d => atom()}}} is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  at key `b`:
  #{a := 'va', b := #{c := #{d => atom()}}} is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  #{c := #{d => atom()}} is not compatible with #{c := id(#{d := atom(), e := atom()})}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ app_a/src/app_a.erl:125:5
    │
125 │     X.
    │     ^
    │     │
    │     X.
Expression has type:   id(#{a := 'va', b := #{c := #{d := pid(), e := pid()}}})
Context expected type: #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
    │     

Because in the expression's type:
  #{ b =>
    #{ c =>
      #{ d =>
        Here the type is:     pid()
        Context expects type: atom()
      , ... }
    , ... }
  , ... }

------------------------------ Detailed message ------------------------------

  id(#{a := 'va', b := #{c := #{d := pid(), e := pid()}}}) is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  #{a := 'va', b := #{c := #{d := pid(), e := pid()}}} is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  at key `b`:
  #{a := 'va', b := #{c := #{d := pid(), e := pid()}}} is not compatible with #{a := 'va', b := #{c := id(#{d := atom(), e := atom()})}}
  because
  #{c := #{d := pid(), e := pid()}} is not compatible with #{c := id(#{d := atom(), e := atom()})}

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/test/app_a_SUITE.erl:18:5
   │
18 │     app_a_test_helpers:fail().
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^ app_a_test_helpers:fail().
Expression has type:   'error'
Context expected type: 'ok'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
  ┌─ app_a/src/app_a_errors_generated.erl:8:10
  │
8 │ foo() -> wrong_ret.
  │          ^^^^^^^^^ 'wrong_ret'.
Expression has type:   'wrong_ret'
Context expected type: 'foo'

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
    ┌─ app_a/src/app_a_lists.erl:576:5
    │
576 │     flatmap(fun thing_to_list/1, List).
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ flatmap(thing_to_list/1, List).
Expression has type:   [term()]
Context expected type: string()

error: recursive_constraint (See https://fb.me/eqwalizer_errors#recursive_constraint)
    ┌─ app_a/src/app_a_lists.erl:588:29
    │
588 │       DeepList :: [term() | DeepList],
    │                             ^^^^^^^^ Recursive constraint: DeepList

error: recursive_constraint (See https://fb.me/eqwalizer_errors#recursive_constraint)
    ┌─ app_a/src/app_a_lists.erl:595:29
    │
595 │       DeepList :: [term() | DeepList],
    │                             ^^^^^^^^ Recursive constraint: DeepList

error: recursive_constraint (See https://fb.me/eqwalizer_errors#recursive_constraint)
    ┌─ app_a/src/app_a_lists.erl:613:29
    │
613 │       DeepList :: [term() | DeepList].
    │                             ^^^^^^^^ Recursive constraint: DeepList

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
     ┌─ app_a/src/app_a_lists.erl:1114:36
     │
1114 │    lists:reverse(umerge3_1(L1, [H2 | H3], T2, H2, [], T3, H3), []).
     │                                    ^^^^^ H3.
Expression has type:   term()
Context expected type: [term()]

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
     ┌─ app_a/src/app_a_lists.erl:1305:5
     │
1305 │     filtermap(F, L).
     │     ^^^^^^^^^^^^^^^
     │     │
     │     filtermap(F, L).
Expression has type:   [term()]
Context expected type: [T | X]
     │     

Because in the expression's type:
  [
    Here the type is:     term()
    Context expects type: T | X
    No candidate matches in the expected union.
  ]

------------------------------ Detailed message ------------------------------

  [term()] is not compatible with [T | X]
  because
  term() is not compatible with T | X
  because
  term() is not compatible with T

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
     ┌─ app_a/src/app_a_lists.erl:1305:15
     │
1305 │     filtermap(F, L).
     │               ^
     │               │
     │               F.
Expression has type:   fun((T) -> boolean() | {'true', X})
Context expected type: fun((term()) -> boolean() | {'true', term()})
     │               

Because in the expression's type:
  fun((
    Here the type is:     term()
    Context expects type: T
  ) -> boolean() | {'true', X})

------------------------------ Detailed message ------------------------------

  fun((T) -> boolean() | {'true', X}) is not compatible with fun((term()) -> boolean() | {'true', term()})
  because
  term() is not compatible with T

error: type_alias_is_non_productive (See https://fb.me/eqwalizer_errors#type_alias_is_non_productive)
   ┌─ app_a/src/app_a_mod2.erl:22:1
   │
22 │ -type invalid() :: invalid().
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive type invalid/0 is not productive

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
   ┌─ app_a/src/app_a_mod2.erl:31:9
   │
31 │     1 + an_atom,
   │         ^^^^^^^ 'an_atom'.
Expression has type:   'an_atom'
Context expected type: number()

error: incompatible_types (See https://fb.me/eqwalizer_errors#incompatible_types)
  ┌─ app_a/test/app_a_test_helpers.erl:6:11
  │
6 │ fail() -> wrong_ret.
  │           ^^^^^^^^^ 'wrong_ret'.
Expression has type:   'wrong_ret'
Context expected type: 'error'

19 ERRORS
