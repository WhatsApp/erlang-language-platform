[{"title":"Architecture","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/architecture/","content":"Architecture","keywords":"","version":"Next"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/about/","content":"About","keywords":"","version":"Next"},{"title":"Contributing","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/contributing/","content":"","keywords":"","version":"Next"},{"title":"To the Language Serverâ€‹","type":1,"pageTitle":"Contributing","url":"/erlang-language-platform/docs/contributing/#to-the-language-server","content":"To contribute to the ELP language server, please refer to these instructions. ","version":"Next","tagName":"h2"},{"title":"To the websiteâ€‹","type":1,"pageTitle":"Contributing","url":"/erlang-language-platform/docs/contributing/#to-the-website","content":"The website is powered by Docusaurus. Most of the content is powered by Markdown. You can find the source code under the website folder in the ELP repository. More detailed instructions on how to run the website locally are available here, but the short story is: git clone https://github.com/WhatsApp/erlang-language-platform.git cd erlang-language-platform/website yarn install yarn build yarn start  The above will start a local server. You can start contributing content while watching live changes at: http://localhost:3000  ","version":"Next","tagName":"h2"},{"title":"To the Erlang Error Indexâ€‹","type":1,"pageTitle":"Contributing","url":"/erlang-language-platform/docs/contributing/#to-the-erlang-error-index","content":"The Erlang Error Index is currently part of the ELP website, so you can refer to the instructions above on how to contribute content. The entrypoint for the index is here. Error codes are organized using namespaces, which are listed here. Generally speaking, a namespace corresponds to a tool which emits error codes (e.g. C for the Erlang Compiler). A folder is associated to each namespace. If the namespace is C, the corresponding folder is named c (lowered version of the namespace). Under each folder you will see the following files: _category_.json: Metadata for the namespace, such as a label and the relative position in the list of namespacesabout.md: High level introduction to the namespace (e.g. which tool is emitting codes for the given namespace)A number of X1234.md files: A file for each error code emitted You can find the list of emitted error codes here. High-quality content contributions to the Error Index are extremely welcome! ","version":"Next","tagName":"h2"},{"title":"Code Actions (a.k.a. Assists)","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/contributing/code-actions/","content":"","keywords":"","version":"Next"},{"title":"The Code Action requestâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#the-code-action-request","content":"Code actions are requested by the editor using the textDocument/codeAction LSP request. Code action requests are handled by the handlers::handle_code_action function in the elp crate. ","version":"Next","tagName":"h2"},{"title":"Adding a new code actionâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#adding-a-new-code-action","content":"In this section we will go through the process of adding a new code action from scratch. The code action (or assist) will suggest the user to delete a function, if it is deemed as unused by the Erlang compiler. ","version":"Next","tagName":"h2"},{"title":"Creating the handlerâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#creating-the-handler","content":"Let's start by creating a new file named delete_function.rs, containing a single function declaration: crates/ide_assists/src/handlers/delete_function.rs use crate::assist_context::{Assists, AssistContext}; pub(crate) fn delete_function(acc: &amp;mut Assists, ctx: &amp;AssistContext) -&gt; Option&lt;()&gt; { todo!() }  Before we can start implementing our code action, there's one more thing we need to do: ensure our new function is invoked by adding it to the list of ELP assists. Open the crates/ide_assists/src/lib.rs file and amend the list of handlers: crates/ide_assists/src/lib.rs mod handlers { [...] mod delete_function [...] pub(crate) fn all() -&gt; &amp;'static [Handler] { &amp;[ [...] delete_function:delete_function, [...] ] } }  ","version":"Next","tagName":"h3"},{"title":"Adding a test caseâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#adding-a-test-case","content":"The easiest way to verify our new code action behaves in the expected way is to start with a test case. ELP allows us to write tests in a very intuitive and straightforward way. Add the following to the delete_function.rs file: crates/ide_assists/src/handlers/delete_function.rs #[cfg(test)] mod tests { use expect_test::expect; use super::*; use crate::tests::*; #[test] fn test_delete_unused_function() { check_assist( delete_function, &quot;Remove the unused function `heavy_calculations/1`&quot;, r#&quot; -module(life). heavy_cal~culations(X) -&gt; %% ^^^^^^^^^^^^^^^^^^^ ðŸ’¡ L1230: Function heavy_calculations/1 is unused X. meaning() -&gt; 42. &quot;#, expect![[ r#&quot; -module(life). meaning() -&gt; 42. &quot;#]], ) } }  There is a lot happening here, so let's go through the code. We are defining a new test, named test_delete_unused_function, which uses an auxiliary function (check_assist) to verify that a given assist behaves as expected. The check_assist function takes 4 arguments: The assist handler (delete_function)A label for the assistAn input fixture representing what the code looks like before a fix is appliedAn output fixture (wrapped in an expect macro) showing what the code looks like after a fix is applied The ~ in the first snippet represents the cursor position. We are asserting that - given a diagnostic message pointing to the unused function - if the user triggers the respective code action when the cursor is hovering the function name range, the unused function gets deleted. Let's try running the test, it should fail with a not yet implemented error: $ cargo test --package elp_ide_assists --lib -- handlers::delete_function::tests::test_delete_unused_function --exact --nocapture [...] ---- handlers::delete_function::tests::test_delete_unused_function stdout ---- thread 'handlers::delete_function::tests::test_delete_unused_function' panicked at 'not yet implemented', crates/ide_assists/src/handlers/delete_function.rs:21:5 [...]  ","version":"Next","tagName":"h3"},{"title":"Diagnostic Annotations and Error Codesâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#diagnostic-annotations-and-error-codes","content":"Before starting with the actual implementation, let's for a second go back to the syntax we used to specify the unused function diagnostic: %% ^^^^^^^^^^^^^^^^^^^ ðŸ’¡ L1230: Function heavy_calculations/1 is unused  This is a test annotation which is used by the ELP testing framework to populate the &quot;context&quot; which is passed to our handler. This is a way to simulate diagnostics coming from external sources (such as the Erlang compiler or a linter), which would be received by the Language Server as part of a textDocument/codeAction request. The annotation has the following format: [\\s]%% [^]* ðŸ’¡ CODE: MESSAGE  Essentially, a number of spaces, followed by the %% which resembles an Erlang comment, a light bulb, a code identifying the diagnostic type and a string message. The code is an unofficial error code which is emitted by both ELP's Erlang Service (see the erlang_service:make_code/2 function in erlang_service/src/erlang_service.erl) and by the Erlang LS language server. The idea is to eventually standardize Erlang error messages and to build what, in the end, should be similar to the Rust or Haskell error indexes. In our case, L1230 is the error corresponding to the unused_function diagnostic. The message is a free text string that accompanies the diagnostic. ","version":"Next","tagName":"h3"},{"title":"Matching on the diagnostic error codeâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#matching-on-the-diagnostic-error-code","content":"To be able to match the L1230 error code, we need to add a new variant to the AssistContextDiagnosticCode enum. Open the crates/ide_db/src/assists.rs file and include the new error code. Don't forget to map it to the L1230 string. crates/ide_db/src/assists.rs pub enum AssistContextDiagnosticCode { UnusedFunction, // &lt;--- Add this [...] UnusedVariable, } impl FromStr for AssistContextDiagnosticCode { type Err = String; fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; { match s { &quot;L1230&quot; =&gt; Ok(AssistContextDiagnosticCode::UnusedFunction), // &lt;--- Add this [...] &quot;L1268&quot; =&gt; Ok(AssistContextDiagnosticCode::UnusedVariable), unknown =&gt; Err(format!(&quot;Unknown AssistContextDiagnosticCode: '{unknown}'&quot;)), } } }  We are all set. Time to implement the delete_function function! ","version":"Next","tagName":"h3"},{"title":"The implementationâ€‹","type":1,"pageTitle":"Code Actions (a.k.a. Assists)","url":"/erlang-language-platform/docs/contributing/code-actions/#the-implementation","content":"Let's look at our function again. pub(crate) fn delete_function(acc: &amp;mut Assists, ctx: &amp;AssistContext) -&gt; Option&lt;()&gt; { todo!() }  We have two input arguments: a mutable accumulator which contains the list of code actions (or assists) which we want to return and a context, from which we can extract diagnostics. The following code iterates through the list of diagnostics and, for each diagnostic matching the UnusedFunction kind, prints the diagnostic for debugging purposes. We return Some(()) to comply with the function signature. use elp_ide_db::assists::AssistContextDiagnosticCode; [...] pub(crate) fn delete_function(acc: &amp;mut Assists, ctx: &amp;AssistContext) -&gt; Option&lt;()&gt; { for d in ctx.diagnostics { if let AssistContextDiagnosticCode::UnusedFunction = d.code { dbg!(d); todo!() } } Some(()) } [...]  If we run the test, we can see what a diagnostic looks like: $ cargo test --package elp_ide_assists --lib -- handlers::delete_function::tests::test_delete_unused_function --exact --nocapture [...] running 1 test [crates/ide_assists/src/handlers/delete_function.rs:25] d = AssistContextDiagnostic { code: UnusedFunction, message: &quot;Function heavy_calculations/1 is unused&quot;, range: 24..40, } [...]  The diagnostic contains the error code and message, together with its range. What we want to do is: Find the function declaration which is pointed by the diagnostic rangeCreate a code action to remove the function declaration and add it to the accumulator How do we find the element which the range covers? Context to the rescue! There's a handy find_node_at_custom_offset function we can use. The offset here indicates the number of bytes from the beginning of the file. We can use the beginning of the diagnostic range for our purposes. let function_declaration: ast::FunDecl = ctx.find_node_at_custom_offset::&lt;ast::FunDecl&gt;(d.range.start())?; let function_range = function_declaration.syntax().text_range();  Let's extract the function name/arity and produce a nice message for the user: let function_name = function_declaration.name()?; let function_arity = function_declaration.arity_value()?; let message = format!(&quot;Remove the unused function `{function_name}/{function_arity}`&quot;);  With the information we have, we can now create a new code action and add it to the accumulator: let id = AssistId(&quot;delete_function&quot;, AssistKind::QuickFix); let function_range = function_declaration.syntax().text_range(); acc.add(id, message, function_range, |builder| { builder.edit_file(ctx.frange.file_id); builder.delete(function_range) }, );  The add function takes four arguments: An internal AssistId made of a unique string (the &quot;delete_function&quot; string in our case) and a Kind. We are specifying QuickFix in our case, but have a look to the LSP specifications to get a list of the available kinds.A message which will be rendered to the user (&quot;Delete the unused function: [FUNCTION_NAME]&quot;)The range of the function. Notice how the range we got from the diagnostic was covering only the name of the function, but we need to delete the whole function, so we need to pass the full range.A function which takes a builder as its input and uses it to manipulate the source file. Here we are saying that we want to edit the current file (we extract the file_id from the ctx context) and that we simply want to delete the range of the function declaration. Yes. It's as simple as that. For completeness, here is the full function implementation: pub(crate) fn delete_function(acc: &amp;mut Assists, ctx: &amp;AssistContext) -&gt; Option&lt;()&gt; { for d in ctx.diagnostics { if let AssistContextDiagnosticCode::UnusedFunction = d.code { let function_declaration: ast::FunDecl = ctx.find_node_at_custom_offset::&lt;ast::FunDecl&gt;(d.range.start())?; let function_name = function_declaration.name()?; let function_arity = function_declaration.arity_value()?; let function_range = function_declaration.syntax().text_range(); let id = AssistId(&quot;delete_function&quot;, AssistKind::QuickFix); let message = format!(&quot;Remove the unused function `{function_name}/{function_arity}`&quot;); acc.add(id, message, function_range, |builder| { builder.edit_file(ctx.frange.file_id); builder.delete(function_range) }); } } Some(()) }  You can look at existing assists for more complex manipulation examples. Try it yourself What we wrote is a unit test, but there's nothing better than checking ourselves the behaviour in the IDE. Compile the elp executable: cargo build  Then visit the Erlang extension settings page and edit the elp.path value to point to the newly built executable, which should reside in: ./debug/elp  Open VS Code (or reload the window if you have it already open) and visit an Erlang file which contains an unused function. You should see something like:  If that worked, congratulations! You managed to write your first ELP code action! ","version":"Next","tagName":"h3"},{"title":"Erlang Error Index","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/","content":"","keywords":"","version":"Next"},{"title":"Namespacesâ€‹","type":1,"pageTitle":"Erlang Error Index","url":"/erlang-language-platform/docs/erlang-error-index/#namespaces","content":"Error codes are grouped by using namespaces. Each namespace is associated to the tool that emits those error codes. Are we missing a tool? Reserve a namespace by making a Pull Request! Tool\tNamespaceErlang Compiler\tC Erlang EPP Dodger\tD Erlang Pre-processor\tE Erlang Linter\tL Erlang EDoc\tO Erlang Parser\tP Erlang Scanner\tS WhatsApp ELP\tW ","version":"Next","tagName":"h2"},{"title":"Ignoring Diagnosticsâ€‹","type":1,"pageTitle":"Erlang Error Index","url":"/erlang-language-platform/docs/erlang-error-index/#ignoring-diagnostics","content":"ELP provides a generic mechanism to ignore instances of an error code. Given the error code X12345 you can ignore a diagnostic by prepending the offending line with a special annotation: % elp:ignore X12345  It is possible to ignore multiple error codes at once: % elp:ignore X12345 Y56789  ","version":"Next","tagName":"h2"},{"title":"C1000 - No Crypto","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1000/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1000 - No Crypto","url":"/erlang-language-platform/docs/erlang-error-index/c/C1000/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1000 - No Crypto","url":"/erlang-language-platform/docs/erlang-error-index/c/C1000/#explanation","content":"The current system is not configured with crypto support, but the code is trying to use code from the crypto application. The error is most likely due to Erlang being installed without SSL support. To fix the issue you should considering re-installing Erlang using the --with-ssl option and ensuring OpenSSL is available for your system. Building Erlang without OpenSSL supports causes the crypto, ssl and ssh applications not to work correctly and the public_key application to have very limited capabilities. For further information on how to install Erlang, please refer to the official installation instructions. ","version":"Next","tagName":"h2"},{"title":"C1001 - Bad Crypto Key","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1001/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1001 - Bad Crypto Key","url":"/erlang-language-platform/docs/erlang-error-index/c/C1001/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1001 - Bad Crypto Key","url":"/erlang-language-platform/docs/erlang-error-index/c/C1001/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1004 - Generic Write Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1004/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1004 - Generic Write Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1004/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1004 - Generic Write Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1004/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1005 - Write Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1005/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1005 - Write Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1005/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1005 - Write Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1005/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1006 - Rename Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1006/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1006 - Rename Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1006/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1006 - Rename Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1006/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1003 - Open Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1003/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1003 - Open Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1003/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1003 - Open Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1003/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1002 - No Crypto Key","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1002/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1002 - No Crypto Key","url":"/erlang-language-platform/docs/erlang-error-index/c/C1002/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1002 - No Crypto Key","url":"/erlang-language-platform/docs/erlang-error-index/c/C1002/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1007 - Parse Transform Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1007/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1007 - Parse Transform Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1007/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1007 - Parse Transform Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1007/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1008 - Undefined Parse Transform","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1008/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1008 - Undefined Parse Transform","url":"/erlang-language-platform/docs/erlang-error-index/c/C1008/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1008 - Undefined Parse Transform","url":"/erlang-language-platform/docs/erlang-error-index/c/C1008/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1012 - Module Name","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1012/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1012 - Module Name","url":"/erlang-language-platform/docs/erlang-error-index/c/C1012/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1012 - Module Name","url":"/erlang-language-platform/docs/erlang-error-index/c/C1012/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1009 - Core Transform","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1009/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1009 - Core Transform","url":"/erlang-language-platform/docs/erlang-error-index/c/C1009/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1009 - Core Transform","url":"/erlang-language-platform/docs/erlang-error-index/c/C1009/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1011 - Bad Return","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1011/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1011 - Bad Return","url":"/erlang-language-platform/docs/erlang-error-index/c/C1011/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1011 - Bad Return","url":"/erlang-language-platform/docs/erlang-error-index/c/C1011/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1099 - Generic Compiler Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1099/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1099 - Generic Compiler Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1099/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1099 - Generic Compiler Error","url":"/erlang-language-platform/docs/erlang-error-index/c/C1099/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"C1010 - Compiler Crash","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/c/C1010/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"C1010 - Compiler Crash","url":"/erlang-language-platform/docs/erlang-error-index/c/C1010/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"C1010 - Compiler Crash","url":"/erlang-language-platform/docs/erlang-error-index/c/C1010/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/d/about/","content":"About","keywords":"","version":"Next"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/l/about/","content":"About The L namespace is reserved for error codes emitted by the Erlang code linter erl_lint. The erl_lint module is used to check Erlang code for illegal syntax and other bugs. It also warns against coding practices that are not recommended. The errors detected include: Redefined and undefined functionsUnbound and unsafe variablesIllegal record use The warnings detected include: Unused functions and importsUnused variablesVariables imported into matchesVariables exported from if/case/receiveVariables shadowed in funs and list comprehensions Some of the warnings are optional, and can be turned on by specifying the appropriate option, described below. For more information about erl_lint, please refer to the official documentation.","keywords":"","version":"Next"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/e/about/","content":"About","keywords":"","version":"Next"},{"title":"L0003 - Unknown Application","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/l/L0003/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"L0003 - Unknown Application","url":"/erlang-language-platform/docs/erlang-error-index/l/L0003/#error","content":"%% ^ Error: Unknown application elp(L0003) [Ln 1, Col 1]  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"L0003 - Unknown Application","url":"/erlang-language-platform/docs/erlang-error-index/l/L0003/#explanation","content":"This occurs when ELP tries to invoke the OTP Erlang Compiler on a module, but cannot find application data for it in the ELP project model. This normally means a misconfiguration of the build information for the project, or in rare cases a bug in ELP. If the build information looks valid, please file a bug report. ","version":"Next","tagName":"h2"},{"title":"L1201 - Undefined Module","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/l/L1201/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"L1201 - Undefined Module","url":"/erlang-language-platform/docs/erlang-error-index/l/L1201/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"L1201 - Undefined Module","url":"/erlang-language-platform/docs/erlang-error-index/l/L1201/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"L1227 - Undefined Function","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/l/L1227/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"L1227 - Undefined Function","url":"/erlang-language-platform/docs/erlang-error-index/l/L1227/#error","content":" main() -&gt; exists(), not_exists(). %% ^^^^^^^^^^^^ ðŸ’¡ warning: Function 'not_exists/0' is undefined.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"L1227 - Undefined Function","url":"/erlang-language-platform/docs/erlang-error-index/l/L1227/#explanation","content":"The warning message indicates that the invoked function cannot be found. The problem is usually due to misspelling, to the wrong number of arguments passed to the function, or to a recent removal of the target function. To fix the problem you should verify whether the invoked function actually exists and has the correct arity. Remember that in Erlang a function is identified by its name and the number of arguments it takes. In case of false positives, the standard elp:ignore mechanism should be used. Please report this as a bug should this be the case. This diagnostic is limited to local function calls (i.e. function calls which do not specify the module name), since fully qualified (aka remote) calls to undefined functions are reported by W0017. ","version":"Next","tagName":"h2"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/about/","content":"About The O namespace is reserved for error codes emitted by the Erlang EDoc program documentation generator.","keywords":"","version":"Next"},{"title":"O0001 - XML Parse Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0001/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0001 - XML Parse Error","url":"/erlang-language-platform/docs/erlang-error-index/o/O0001/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0001 - XML Parse Error","url":"/erlang-language-platform/docs/erlang-error-index/o/O0001/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0000 - Generic EDoc Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0000/","content":"","keywords":"","version":"Next"},{"title":"O0002 - Error in XML Parser","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0002/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0002 - Error in XML Parser","url":"/erlang-language-platform/docs/erlang-error-index/o/O0002/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0002 - Error in XML Parser","url":"/erlang-language-platform/docs/erlang-error-index/o/O0002/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0000 - Generic EDoc Error","url":"/erlang-language-platform/docs/erlang-error-index/o/O0000/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0000 - Generic EDoc Error","url":"/erlang-language-platform/docs/erlang-error-index/o/O0000/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0003 - Nocatch in XML Parser","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0003/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0003 - Nocatch in XML Parser","url":"/erlang-language-platform/docs/erlang-error-index/o/O0003/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0003 - Nocatch in XML Parser","url":"/erlang-language-platform/docs/erlang-error-index/o/O0003/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0005 - ` Quote ended unexpectedly","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0005/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0005 - ` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0005/#error","content":" %% @doc To execute the program, call `main` %% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ warning: `-quote ended unexpectedly main() -&gt; ok.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0005 - ` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0005/#explanation","content":"In EDoc, the ` character (known as back-quote) can be used for verbatim quoting. A character sequence such as `...' is expanded to &lt;code&gt;...&lt;/code&gt;, where all occurrences of the special XML characters &lt; and &amp; (and for completeness, also &gt;) in the quoted text have been escaped to &amp;lt;, &amp;amp;, and &amp;gt;, respectively. All whitespace is stripped from the beginning and end of the quoted text. Notice how thes syntax differs from the more traditional Markdown-style one (`...`). The most likely cause for the above error is that you are using Markdown-style back-quoting. To fix it, just replace the last ` into ':  %% @doc To execute the program, call `main' main() -&gt; ok.  You can read more about verbatim quoting in EDoc here. ","version":"Next","tagName":"h2"},{"title":"O0007 - ``` Quote ended unexpectedly","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0007/","content":"","keywords":"","version":"Next"},{"title":"O0006 - `` Quote ended unexpectedly","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0006/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0006 - `` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0006/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0006 - `` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0006/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0004 - Heading end marker mismatch","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0004/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0004 - Heading end marker mismatch","url":"/erlang-language-platform/docs/erlang-error-index/o/O0004/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0004 - Heading end marker mismatch","url":"/erlang-language-platform/docs/erlang-error-index/o/O0004/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0007 - ``` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0007/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0007 - ``` Quote ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0007/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0009 - Cannot Handle Guard","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0009/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0009 - Cannot Handle Guard","url":"/erlang-language-platform/docs/erlang-error-index/o/O0009/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0009 - Cannot Handle Guard","url":"/erlang-language-platform/docs/erlang-error-index/o/O0009/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0008 - Reference ended unexpectedly","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0008/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0008 - Reference ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0008/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0008 - Reference ended unexpectedly","url":"/erlang-language-platform/docs/erlang-error-index/o/O0008/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0011 - File Not Found","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0011/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0011 - File Not Found","url":"/erlang-language-platform/docs/erlang-error-index/o/O0011/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0011 - File Not Found","url":"/erlang-language-platform/docs/erlang-error-index/o/O0011/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0010 - Error Reading File","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0010/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0010 - Error Reading File","url":"/erlang-language-platform/docs/erlang-error-index/o/O0010/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0010 - Error Reading File","url":"/erlang-language-platform/docs/erlang-error-index/o/O0010/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0013 - Spec arity does not match","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0013/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0013 - Spec arity does not match","url":"/erlang-language-platform/docs/erlang-error-index/o/O0013/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0013 - Spec arity does not match","url":"/erlang-language-platform/docs/erlang-error-index/o/O0013/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0014 - Spec name does not match","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0014/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0014 - Spec name does not match","url":"/erlang-language-platform/docs/erlang-error-index/o/O0014/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0014 - Spec name does not match","url":"/erlang-language-platform/docs/erlang-error-index/o/O0014/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0012 - Expected Filename as a String","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0012/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0012 - Expected Filename as a String","url":"/erlang-language-platform/docs/erlang-error-index/o/O0012/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0012 - Expected Filename as a String","url":"/erlang-language-platform/docs/erlang-error-index/o/O0012/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0016 - Redefining built-in type","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0016/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0016 - Redefining built-in type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0016/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0016 - Redefining built-in type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0016/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0017 - Multiple <...> Sections","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0017/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0017 - Multiple <...> Sections","url":"/erlang-language-platform/docs/erlang-error-index/o/O0017/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0017 - Multiple <...> Sections","url":"/erlang-language-platform/docs/erlang-error-index/o/O0017/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0015 - Must specify name or email","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0015/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0015 - Must specify name or email","url":"/erlang-language-platform/docs/erlang-error-index/o/O0015/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0015 - Must specify name or email","url":"/erlang-language-platform/docs/erlang-error-index/o/O0015/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0019 - Missing","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0019/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0019 - Missing","url":"/erlang-language-platform/docs/erlang-error-index/o/O0019/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0019 - Missing","url":"/erlang-language-platform/docs/erlang-error-index/o/O0019/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0022 - Tag not allowed here","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0022/","content":"","keywords":"","version":"Next"},{"title":"O0018 - Multiple [...] Sections","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0018/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0018 - Multiple [...] Sections","url":"/erlang-language-platform/docs/erlang-error-index/o/O0018/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0018 - Multiple [...] Sections","url":"/erlang-language-platform/docs/erlang-error-index/o/O0018/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0022 - Tag not allowed here","url":"/erlang-language-platform/docs/erlang-error-index/o/O0022/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0022 - Tag not allowed here","url":"/erlang-language-platform/docs/erlang-error-index/o/O0022/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0021 - Multiple Tag","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0021/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0021 - Multiple Tag","url":"/erlang-language-platform/docs/erlang-error-index/o/O0021/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0021 - Multiple Tag","url":"/erlang-language-platform/docs/erlang-error-index/o/O0021/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0024 - Cannot find application directory","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0024/","content":"","keywords":"","version":"Next"},{"title":"O0020 - Unexpected end of Expression","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0020/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0020 - Unexpected end of Expression","url":"/erlang-language-platform/docs/erlang-error-index/o/O0020/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0020 - Unexpected end of Expression","url":"/erlang-language-platform/docs/erlang-error-index/o/O0020/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0024 - Cannot find application directory","url":"/erlang-language-platform/docs/erlang-error-index/o/O0024/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0024 - Cannot find application directory","url":"/erlang-language-platform/docs/erlang-error-index/o/O0024/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0023 - Bad Macro Definition","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0023/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0023 - Bad Macro Definition","url":"/erlang-language-platform/docs/erlang-error-index/o/O0023/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0023 - Bad Macro Definition","url":"/erlang-language-platform/docs/erlang-error-index/o/O0023/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0026 - Undefined Macro","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0026/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0026 - Undefined Macro","url":"/erlang-language-platform/docs/erlang-error-index/o/O0026/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0026 - Undefined Macro","url":"/erlang-language-platform/docs/erlang-error-index/o/O0026/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0027 - Unexpected end of macro","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0027/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0027 - Unexpected end of macro","url":"/erlang-language-platform/docs/erlang-error-index/o/O0027/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0027 - Unexpected end of macro","url":"/erlang-language-platform/docs/erlang-error-index/o/O0027/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0025 - Recursive Macro Expansion","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0025/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0025 - Recursive Macro Expansion","url":"/erlang-language-platform/docs/erlang-error-index/o/O0025/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0025 - Recursive Macro Expansion","url":"/erlang-language-platform/docs/erlang-error-index/o/O0025/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0028 - Missing macro name","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0028/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0028 - Missing macro name","url":"/erlang-language-platform/docs/erlang-error-index/o/O0028/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0028 - Missing macro name","url":"/erlang-language-platform/docs/erlang-error-index/o/O0028/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0030 - Reference to untype record","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0030/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0030 - Reference to untype record","url":"/erlang-language-platform/docs/erlang-error-index/o/O0030/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0030 - Reference to untype record","url":"/erlang-language-platform/docs/erlang-error-index/o/O0030/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0029 - Bad Macro Name","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0029/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0029 - Bad Macro Name","url":"/erlang-language-platform/docs/erlang-error-index/o/O0029/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0029 - Bad Macro Name","url":"/erlang-language-platform/docs/erlang-error-index/o/O0029/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0033 - Cannot Annotate Spec","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0033/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0033 - Cannot Annotate Spec","url":"/erlang-language-platform/docs/erlang-error-index/o/O0033/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0033 - Cannot Annotate Spec","url":"/erlang-language-platform/docs/erlang-error-index/o/O0033/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0031 - Not Allowed, Skipping Tag","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0031/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0031 - Not Allowed, Skipping Tag","url":"/erlang-language-platform/docs/erlang-error-index/o/O0031/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0031 - Not Allowed, Skipping Tag","url":"/erlang-language-platform/docs/erlang-error-index/o/O0031/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0032 - Cannot handle spec with constraints","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0032/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0032 - Cannot handle spec with constraints","url":"/erlang-language-platform/docs/erlang-error-index/o/O0032/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0032 - Cannot handle spec with constraints","url":"/erlang-language-platform/docs/erlang-error-index/o/O0032/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0035 - @type tag deprecated","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0035/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0035 - @type tag deprecated","url":"/erlang-language-platform/docs/erlang-error-index/o/O0035/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0035 - @type tag deprecated","url":"/erlang-language-platform/docs/erlang-error-index/o/O0035/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0036 - Redefining built-in type","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0036/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0036 - Redefining built-in type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0036/#error","content":"caution This error code is not emitted any longer. It was a O0016 - Redefining built-in type duplicate. ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0036 - Redefining built-in type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0036/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0034 - @spec tag deprecated","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0034/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0034 - @spec tag deprecated","url":"/erlang-language-platform/docs/erlang-error-index/o/O0034/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0034 - @spec tag deprecated","url":"/erlang-language-platform/docs/erlang-error-index/o/O0034/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0038 - Missing Type","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0038/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0038 - Missing Type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0038/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0038 - Missing Type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0038/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/about/","content":"About The P namespace is reserved for error codes emitted by the Erlang parser erl_parse. The erl_parse module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms. For more information about erl_parse please refer to the official documentation.","keywords":"","version":"Next"},{"title":"O0039 - Tag Not Recognized","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0039/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0039 - Tag Not Recognized","url":"/erlang-language-platform/docs/erlang-error-index/o/O0039/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0039 - Tag Not Recognized","url":"/erlang-language-platform/docs/erlang-error-index/o/O0039/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1701 - Bad Type Variable","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1701/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1701 - Bad Type Variable","url":"/erlang-language-platform/docs/erlang-error-index/p/P1701/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1701 - Bad Type Variable","url":"/erlang-language-platform/docs/erlang-error-index/p/P1701/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"O0037 - Duplicated Type","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/o/O0037/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"O0037 - Duplicated Type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0037/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"O0037 - Duplicated Type","url":"/erlang-language-platform/docs/erlang-error-index/o/O0037/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1700 - Head Mismatch","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1700/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1700 - Head Mismatch","url":"/erlang-language-platform/docs/erlang-error-index/p/P1700/#error","content":" foo(0) -&gt; 1; boo(1) -&gt; 2. %% ^^^ error: head mismatch 'boo' vs 'foo'  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1700 - Head Mismatch","url":"/erlang-language-platform/docs/erlang-error-index/p/P1700/#explanation","content":"The error message indicates that two function clauses belonging the same function differ in their name or in the number of arguments. In Erlang functions are uniquely identified by the module they belong to, the function name and the number of argument they take (known as arity). Each function can be composed by multiple clauses, separated by a semicolon (;). Therefore, all clauses belonging to the same function have to share the same name. To fix the error you need to ensure that every function clause has the same name and that it takes the same number of arguments. In the above example, boo/1 could be a second clause for the foo/1 function, containing a typo. In that case, the corrective action would be to fix the typo:  foo(0) -&gt; 1; foo(1) -&gt; 2.  It could also be that boo/1 is intended to be a completely different function. In that case the error can be fixed by replacing the semicolon on the previous line with a fullstop. Leaving an empty line between the two functions would also be a good idea, to help the reader understanding foo/1 and boo/1 are two distinct functions:  foo(0) -&gt; 1. boo(1) -&gt; 2.  For more information about Erlang functions please refer to the official documentation. ","version":"Next","tagName":"h2"},{"title":"P1702 - Bad Attribute","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1702/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1702 - Bad Attribute","url":"/erlang-language-platform/docs/erlang-error-index/p/P1702/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1702 - Bad Attribute","url":"/erlang-language-platform/docs/erlang-error-index/p/P1702/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1704 - Bad Binary Type","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1704/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1704 - Bad Binary Type","url":"/erlang-language-platform/docs/erlang-error-index/p/P1704/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1704 - Bad Binary Type","url":"/erlang-language-platform/docs/erlang-error-index/p/P1704/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1703 - Unsupported Constraint","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1703/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1703 - Unsupported Constraint","url":"/erlang-language-platform/docs/erlang-error-index/p/P1703/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1703 - Unsupported Constraint","url":"/erlang-language-platform/docs/erlang-error-index/p/P1703/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1706 - Bad Function Arity","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1706/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1706 - Bad Function Arity","url":"/erlang-language-platform/docs/erlang-error-index/p/P1706/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1706 - Bad Function Arity","url":"/erlang-language-platform/docs/erlang-error-index/p/P1706/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1705 - Bad Variable List","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1705/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1705 - Bad Variable List","url":"/erlang-language-platform/docs/erlang-error-index/p/P1705/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1705 - Bad Variable List","url":"/erlang-language-platform/docs/erlang-error-index/p/P1705/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1708 - Bad Name/Arity","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1708/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1708 - Bad Name/Arity","url":"/erlang-language-platform/docs/erlang-error-index/p/P1708/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1708 - Bad Name/Arity","url":"/erlang-language-platform/docs/erlang-error-index/p/P1708/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1710 - Bad Record Field","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1710/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1710 - Bad Record Field","url":"/erlang-language-platform/docs/erlang-error-index/p/P1710/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1710 - Bad Record Field","url":"/erlang-language-platform/docs/erlang-error-index/p/P1710/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1709 - Bad Record Declaration","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1709/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1709 - Bad Record Declaration","url":"/erlang-language-platform/docs/erlang-error-index/p/P1709/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1709 - Bad Record Declaration","url":"/erlang-language-platform/docs/erlang-error-index/p/P1709/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1798 - Bad Declaration","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1798/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1798 - Bad Declaration","url":"/erlang-language-platform/docs/erlang-error-index/p/P1798/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1798 - Bad Declaration","url":"/erlang-language-platform/docs/erlang-error-index/p/P1798/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1707 - Bad Function Name","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1707/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1707 - Bad Function Name","url":"/erlang-language-platform/docs/erlang-error-index/p/P1707/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1707 - Bad Function Name","url":"/erlang-language-platform/docs/erlang-error-index/p/P1707/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1711 - Syntax Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1711/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1711 - Syntax Error","url":"/erlang-language-platform/docs/erlang-error-index/p/P1711/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1711 - Syntax Error","url":"/erlang-language-platform/docs/erlang-error-index/p/P1711/#explanation","content":"","version":"Next","tagName":"h2"},{"title":"P1799 - Generic Parse Error","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/p/P1799/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"P1799 - Generic Parse Error","url":"/erlang-language-platform/docs/erlang-error-index/p/P1799/#error","content":"  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"P1799 - Generic Parse Error","url":"/erlang-language-platform/docs/erlang-error-index/p/P1799/#explanation","content":"This error code represents a generic parsing error for which a specific error code does not exist. ","version":"Next","tagName":"h2"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/about/","content":"About The W namespace is reserved for error codes emitted by the WhatsApp Erlang Language Platform.","keywords":"","version":"Next"},{"title":"About","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/s/about/","content":"About","keywords":"","version":"Next"},{"title":"W0001 - Module Mismatch","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0001/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0001 - Module Mismatch","url":"/erlang-language-platform/docs/erlang-error-index/w/W0001/#error","content":"-module(bar). %% ^^^ error: Module name (bar) does not match file name (foo)  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0001 - Module Mismatch","url":"/erlang-language-platform/docs/erlang-error-index/w/W0001/#explanation","content":"The error message is indicating that the module name specified in the -module attribute (bar) does not match the file name of the source code file (foo.erl). In Erlang, the module name - an atom - has to be same as the file name minus the extension .erl. This is to ensure code loading works as intended. To fix this error, you should either change the -module directive to match the file name (i.e. -module(foo)) or rename the file to match the module name (i.e. foo.erl -&gt; bar.erl). ","version":"Next","tagName":"h2"},{"title":"W0000 - Bound Variable in Pattern","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0000/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0000 - Bound Variable in Pattern","url":"/erlang-language-platform/docs/erlang-error-index/w/W0000/#error","content":"caution This error code is not emitted any longer. Semantic tokens are used instead. ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0000 - Bound Variable in Pattern","url":"/erlang-language-platform/docs/erlang-error-index/w/W0000/#explanation","content":"Inspired by Elixir's pinning operator, this diagnostic marks variables in patterns, if they are already bound. This can be problematic if the binding is not intentional and it can lead to subtle bugs. Consider the following code snippet: handle_request(Message) -&gt; case next_action() of {send, Message} -&gt; ... {error, Error} ... end  The pattern on line 3 will only be matched if and only if the Message returned by the call to next_action/1 is the same as the one on line 1. This behaviour could be intentional or not. If not, it can easily lead to bugs. An alternative, more explicit, way to express that behaviour - when intentional - could be: handle_request(Message) -&gt; case next_action() of {send, ActionMessage} when ActionMessage =:= Message -&gt; ... {error, Error} ... end  ","version":"Next","tagName":"h2"},{"title":"W0002 - Unused Macro","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0002/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0002 - Unused Macro","url":"/erlang-language-platform/docs/erlang-error-index/w/W0002/#error","content":"-module(main). -define(MEANING_OF_LIFE, 42). %% ^^^^^^^^^^^^^^^ warning: Unused macro (MEANING_OF_LIFE)  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0002 - Unused Macro","url":"/erlang-language-platform/docs/erlang-error-index/w/W0002/#explanation","content":"The error message is indicating that the macro MEANING_OF_LIFE is defined but not used anywhere in the code. To fix this warning, you should either use the macro somewhere in the code or remove the definition of the macro if it is no longer needed. ","version":"Next","tagName":"h2"},{"title":"W0003 - Unused Record Field","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0003/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0003 - Unused Record Field","url":"/erlang-language-platform/docs/erlang-error-index/w/W0003/#error","content":"-module(main). -export([main/1]). -record(used_field, {field_a, field_b = 42}). -record(unused_field, {field_c, field_d}). %% ^^^^^^^ warning: Unused record field (unused_field.field_d) main(#used_field{field_a = A, field_b = B}) -&gt; {A, B}; main(R) -&gt; R#unused_field.field_c.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0003 - Unused Record Field","url":"/erlang-language-platform/docs/erlang-error-index/w/W0003/#explanation","content":"The error message is indicating that the field field_d in the record unused_field is defined but not used anywhere in the code. In Erlang, records are a way to define a data structure with named fields. However, if a field is defined but not used, it is considered unused and will generate a warning when the code is compiled. To fix this warning, you should either use the field somewhere in the code or remove the definition of the field if it is no longer needed. It's worth noting that the field field_c in the same record is being used in the function main/1, so it's not considered unused. ","version":"Next","tagName":"h2"},{"title":"W0004 - Syntactic Element Missing","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0004/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0004 - Syntactic Element Missing","url":"/erlang-language-platform/docs/erlang-error-index/w/W0004/#error","content":"-export_type([foo/0 bar/1]). %% ^ warning: Missing ','  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0004 - Syntactic Element Missing","url":"/erlang-language-platform/docs/erlang-error-index/w/W0004/#explanation","content":"The message is indicating that there is a missing element, such as a comma, semi-colon or full stop. To fix this error you should add the missing element (a comma in the above example). ","version":"Next","tagName":"h2"},{"title":"W0007 - Trivial Match","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0007/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0007 - Trivial Match","url":"/erlang-language-platform/docs/erlang-error-index/w/W0007/#error","content":"-module(main). do_foo() -&gt; X = 42, Y = 42, X = X, %%% ^^^^^ warning: match is redundant X = Y.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0007 - Trivial Match","url":"/erlang-language-platform/docs/erlang-error-index/w/W0007/#explanation","content":"The error message is indicating that the statement X = X is redundant. Since the pattern (the part on the left of the = and the expression (the part on the right of the =) are the same and given that in Erlang variables are immutable (once a value is assigned to a variable it cannot be changed), the operation will always succeed. To fix this warning, you should remove the redundant assignment. ","version":"Next","tagName":"h2"},{"title":"W0005 - Mutable Variable Bug","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0005/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0005 - Mutable Variable Bug","url":"/erlang-language-platform/docs/erlang-error-index/w/W0005/#error","content":"-module(main). -export([test/0]). test() -&gt; Zero = 0, One = 1, Result = One = Zero, %% ^^^^^^^^^^^^^^^^^^^ error: Possible mutable variable bug io:format(&quot;~p ~p~n&quot;, [Zero, One]), Result.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0005 - Mutable Variable Bug","url":"/erlang-language-platform/docs/erlang-error-index/w/W0005/#explanation","content":"The error message indicates that this specific pattern could trigger a known bug with certain OTP releases. Earlier (i.e. &lt; OTP 26) Erlang releases were affected by a subtle bug which caused the pattern matching operator to incorrectly mutate variables. By compiling the above snippet on one of the problematic releases you'd get: 1&gt; test:test(). 0 0 0  The code should have crashed with a pattern match error. Instead, the variable One mutated from the original value 1 to the value 0. ","version":"Next","tagName":"h2"},{"title":"W0006 - Statement Has No Effect","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0006/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0006 - Statement Has No Effect","url":"/erlang-language-platform/docs/erlang-error-index/w/W0006/#error","content":"-module(main). test_foo(_Config) -&gt; do_something(), ok, %%% ^^ warning: this statement has no effect do_something_else(), bar, %%% ^^^ warning: this statement has no effect ok. do_something() -&gt; ok. do_something_else() -&gt; ok.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0006 - Statement Has No Effect","url":"/erlang-language-platform/docs/erlang-error-index/w/W0006/#explanation","content":"The error message is indicating that the statements ok and bar (atoms in this case) have no effect in the code. The atoms in the above snippet are used as a standalone statement and they have no effect on the program. To fix these warnings, you should either remove the unused statements or change the code so that they are used. ","version":"Next","tagName":"h2"},{"title":"W0008 - Unreachable Test","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0008/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0008 - Unreachable Test","url":"/erlang-language-platform/docs/erlang-error-index/w/W0008/#error","content":" -module(my_SUITE). -export([all/0]). -export([a/1, b/1]). all() -&gt; [a]. a(_Config) -&gt; ok. b(_Config) -&gt; %% ^ warning: Unreachable test (b/1) ok.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0008 - Unreachable Test","url":"/erlang-language-platform/docs/erlang-error-index/w/W0008/#explanation","content":"The error message is indicating that the b test case is not reachable by the Common Test testing framework and that it won't be executed by the testing framework. In Common Test, test cases are auto-discovered by the framework via the all/0 and groups/1 function. A function is deemed an unreachable test if: the function belongs to a module name ending with _SUITEthe function has arity 1the function is exportedthe function is not reachable via the all/0 and group/0 functions and it is therefore not executed by the Erlang Common Test framework. In the above snippet, the b/1 function falls into that category since all of the above apply. To fix this warning you should either remove the test cases (if not necessary any longer) or make it reachable via the all/0 function. Sometimes it is intentional to have test cases which are defined but not running (e.g. they are occasionally run manually). In such case you can silent the warning by using an ELP ignore annotation. ","version":"Next","tagName":"h2"},{"title":"W0011 - Application Get Env","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0011/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0011 - Application Get Env","url":"/erlang-language-platform/docs/erlang-error-index/w/W0011/#error","content":"/app_a/src/main.erl -module(main). get_app_b_env() -&gt; application:get_env(app_b, key). %% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ warning: module `main` belongs to app `app_a`, but reads env for `app_b`  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0011 - Application Get Env","url":"/erlang-language-platform/docs/erlang-error-index/w/W0011/#explanation","content":"The error message is indicating that a module belonging to an application app_a is attempting at reading the environment for a different application app_b. Erlang provides an API to access the application environment of a different application from the one the calling module (or, to be more precise, the calling process executing that module) belongs to. This pattern can lead to subtle bugs since the target application (app_b in the above example) could not yet be loaded at the time of the call or it could be missing from a specific release. Sometimes accessing an other applicatioon environment is a totally acceptable behaviour. In those cases, the warning can be silenced via the standard elp:ignore mechanirm. ","version":"Next","tagName":"h2"},{"title":"W0009 - Redundant Assignment","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0009/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0009 - Redundant Assignment","url":"/erlang-language-platform/docs/erlang-error-index/w/W0009/#error","content":"do() -&gt; X = 42, Y = X, %% ^^^^^ assignment is redundant foo(Y).  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0009 - Redundant Assignment","url":"/erlang-language-platform/docs/erlang-error-index/w/W0009/#explanation","content":"The error message is indicating that the assignment Y = X is un-necessary. The variable Y is unbound during the assignment and the value resulting from the assignment is then passed to the function foo/1. A more concise way to express the above would be: do() -&gt; X = 42, foo(X).  ","version":"Next","tagName":"h2"},{"title":"W0010 - Unused Function Argument","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0010/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0010 - Unused Function Argument","url":"/erlang-language-platform/docs/erlang-error-index/w/W0010/#error","content":"length([]) -&gt; 0; length([Head|Tail]) -&gt; 1 + length(Tail). %% ^^^^ warning: this variable is unused  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0010 - Unused Function Argument","url":"/erlang-language-platform/docs/erlang-error-index/w/W0010/#explanation","content":"The message is indicating that the given variable is unused within the function clause body. To fix the warning you should either: remove the unused parameterreplace it with an underscore (_)prepend it with an underscore (_) In the above snippet, we don't need to look at the actual value of the Head to calculate the length of the input list. Therefore, we can replace the variable name with an underscore: length([]) -&gt; 0; length([_|Tail]) -&gt; 1 + length(Tail).  Even better, we could keep the variable name and prepend it with an underscore. This way we'll get the best of both worlds: we will silent the warning, while keeping the code readable: length([]) -&gt; 0; length([_Head|Tail]) -&gt; 1 + length(Tail).  Let's look at a different scenario: handle_message(hi, State) -&gt; %% ^^^^^ warning: this variable is unused hi(); handle_message(bye, State) -&gt; %% ^^^^^ warning: this variable is unused bye().  In this case the State variable is not needed by any of the function clauses of the handle_message/2 function. Therefore, we could consider simplifying the function signature getting rid of the un-necessary second argument: handle_message(hi) -&gt; hi(); handle_message(bye) -&gt; bye().  Keep in mind that in this case we may need to update callers of the handle_message/1 function! ","version":"Next","tagName":"h2"},{"title":"W0013 - Misspelled Attribute","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0013/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0013 - Misspelled Attribute","url":"/erlang-language-platform/docs/erlang-error-index/w/W0013/#error","content":" -dyalizer({nowarn_function, f/0}). %% ^^^^^^^^ error: misspelled attribute, saw 'dyalizer' but expected 'dialyzer'  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0013 - Misspelled Attribute","url":"/erlang-language-platform/docs/erlang-error-index/w/W0013/#explanation","content":"The message is indicating that the attribute name is suspiciously similar to a known one and it could therefore contain a typo. To fix the error either correct the attribute spelling or ignore the warning via the standard elp:ignore mechanism. ","version":"Next","tagName":"h2"},{"title":"W0012 - Missing warn_missing_spec compiler attribute","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0012/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0012 - Missing warn_missing_spec compiler attribute","url":"/erlang-language-platform/docs/erlang-error-index/w/W0012/#error","content":" -module(main). -compile([export_all, nowarn_export_all]). %% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: Please add &quot;-compile(warn_missing_spec).&quot; or %% | &quot;-compile(warn_missing_spec_all).&quot; to the module. %% | If exported functions are not all specced, they need to be specced.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0012 - Missing warn_missing_spec compiler attribute","url":"/erlang-language-platform/docs/erlang-error-index/w/W0012/#explanation","content":"The error is indicating that the given module does not have a warn_missing_spec or warn_missing_spec_all compiler attribute but it should have one. This diagnostic can be particularly useful for large code bases where type information (via -spec attributes) are added incrementally and it's not possible to specify the option globally. To fix this warning you can add one of the following compiler attributes: -compile(warn_missing_spec). %% To enable warnings on exported functions only -compile(warn_missing_spec_all). %% To enable warnings on all functions  Notice that multiple compiler attributes can be listed using the same attribute. For example: -compile([export_all, nowarn_export_all, warn_missing_spec]).  For more information about compiler attributes and their meaning see here. ","version":"Next","tagName":"h2"},{"title":"W0014 - Cross Node Evaluation Not Allowed","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0014/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0014 - Cross Node Evaluation Not Allowed","url":"/erlang-language-platform/docs/erlang-error-index/w/W0014/#error","content":" do(Node) -&gt; erlang:spawn_link(Node, fun() -&gt; ok end). %% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: Production code must not use cross node eval (e.g. `rpc:call()`)  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0014 - Cross Node Evaluation Not Allowed","url":"/erlang-language-platform/docs/erlang-error-index/w/W0014/#explanation","content":"The error is indicating that remote execution is happening between two nodes, in an environment where this is not allowed. To fix the error either remove the invocation or ignore the problem via the standard elp:ignore mechanism. ","version":"Next","tagName":"h2"},{"title":"W0017 - Unused Function","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0017/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0017 - Unused Function","url":"/erlang-language-platform/docs/erlang-error-index/w/W0017/#error","content":" main() -&gt; dep:exists(), dep:not_exists(). %% ^^^^^^^^^^^^^^^^ ðŸ’¡ warning: Function 'dep:not_exists/0' is undefined.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0017 - Unused Function","url":"/erlang-language-platform/docs/erlang-error-index/w/W0017/#explanation","content":"The warning message indicates that the invoked function cannot be found. The problem could be due to misspelling, to the wrong number of arguments passed to the function, to a recent removal of the target function, to a dependency change or to a misconfiguration of the language server. To fix the problem you should verify whether the invoked function actually exists and has the correct arity. Remember that in Erlang a function is identified by its name and the number of arguments it takes. In case of false positives, the standard elp:ignore mechanism should be used. Please report this as a bug should this be the case. This diagnostic is limited to fully qualified function calls (i.e. function calls which specify the module name), since local calls to undefined functions are already reported by the Erlang linter (see L1227). ","version":"Next","tagName":"h2"},{"title":"W0016 - Deprecated Function","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0016/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0016 - Deprecated Function","url":"/erlang-language-platform/docs/erlang-error-index/w/W0016/#error","content":" main() -&gt; b:not_ok_to_use(). %% ^^^^^^^^^^^^^^^^^ ðŸ’¡ warning: Function 'not_ok_to_use/0' is deprecated.  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0016 - Deprecated Function","url":"/erlang-language-platform/docs/erlang-error-index/w/W0016/#explanation","content":"The warning message indicates that the invoked function is deprecated, which means it is no longer recommended for use. To fix the problem you should investigate why the function is deprecated and whether there is an alternative function that can be used instead. You may need to refer to documentation to determine the best course of action. A function is usually deprecated via the -deprecated attribute. This analysis is very similar to thedeprecated_function_calls analysis performed by the XRef cross-reference tool. There is currently no support for the -ignore_xref attribute used by rebar3 to silent specific instances of this diagnostic. Instead, the standard elp:ignore mechanism should be used. ","version":"Next","tagName":"h2"},{"title":"W0015 - Dependent Header","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/erlang-error-index/w/W0015/","content":"","keywords":"","version":"Next"},{"title":"Errorâ€‹","type":1,"pageTitle":"W0015 - Dependent Header","url":"/erlang-language-platform/docs/erlang-error-index/w/W0015/#error","content":"/my_app/include/my_header.hrl -define(MY_MACRO, #my_record.my_field). %% ^^^^^^^^^^ warning: Record 'my_record' not defined in this context  ","version":"Next","tagName":"h2"},{"title":"Explanationâ€‹","type":1,"pageTitle":"W0015 - Dependent Header","url":"/erlang-language-platform/docs/erlang-error-index/w/W0015/#explanation","content":"The message is indicating that the given header file is not &quot;independent&quot;, meaning that it contains a reference to an entity (the my_record record in this case) which is neither defined in the same file or included. Since header files are processed lazily, the Erlang compiler cannot detect this situation but ELP can. To fix the error, include the header file where the my_record record is defined. ","version":"Next","tagName":"h2"},{"title":"Emacs","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/get-started/emacs/","content":"Emacs","keywords":"","version":"Next"},{"title":"Get Started","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/get-started/","content":"Get Started","keywords":"","version":"Next"},{"title":"VS Code","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/get-started/vscode/","content":"VS Code","keywords":"","version":"Next"},{"title":"Feature Gallery","type":0,"sectionRef":"#","url":"/erlang-language-platform/docs/feature-gallery/","content":"","keywords":"","version":"Next"},{"title":"Syntax Highlightingâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#syntax-highlighting","content":"VS Code ","version":"Next","tagName":"h2"},{"title":"Semantic Syntax Highlightingâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#semantic-syntax-highlighting","content":"In addition to traditional syntax highlighting, ELP can highlight the code semantically. As an example, exported functions can be rendered differently from un-exported ones and deprecated functions are clearly marked via a strikethrough. VS Code We currently support the following token modifiers: Token Modifier\tSemantic Meaningbound\tThe variable used in a pattern is already bound exported_function\tThe given function is exported deprecated_function\tThe given function is marked as deprecated ","version":"Next","tagName":"h2"},{"title":"Go To Definitionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#go-to-definition","content":"Navigate to the definition of a given identifier. Currently supported for: ModulesFunctionsRecordsRecord fieldsTypesBehavioursMacrosHeadersVariables ","version":"Next","tagName":"h2"},{"title":"Find Referencesâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#find-references","content":"Show/peek references to the item at the cursor location. VS Code Currently supported for all items listed in the Go To Definition section. ","version":"Next","tagName":"h2"},{"title":"Workspace Symbolsâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#workspace-symbols","content":"Quickly navigate to a symbol in the workspace. VS Code Currently supported for: Modules ","version":"Next","tagName":"h2"},{"title":"Foldingâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#folding","content":"Collapse/expand sections of the code to focus on what matters. Currently supported for: Functions ","version":"Next","tagName":"h2"},{"title":"Call Hierarchyâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#call-hierarchy","content":"Navigate callers and callees for a given function. ","version":"Next","tagName":"h2"},{"title":"Documentation on Hoverâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#documentation-on-hover","content":"Extract and present EDoc information when hovering a function call. ","version":"Next","tagName":"h2"},{"title":"Auto-completionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#auto-completion","content":"Provide contextual auto-completion to ease writing code. Currently supported for: Module AttributesFunctionsTypesKeywordsMacrosRecordsRecord FieldsVariables ","version":"Next","tagName":"h2"},{"title":"Signature Helpâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#signature-help","content":"Get some guidance while invoking a local or remote function, by previewing argument specific documentation. ","version":"Next","tagName":"h2"},{"title":"Highlight Related Informationâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#highlight-related-information","content":"Focus on an element and its related info at a glance. ","version":"Next","tagName":"h2"},{"title":"Inlay Hintsâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#inlay-hints","content":"Currently supported for all items listed in the Go To Definition section. ","version":"Next","tagName":"h2"},{"title":"Go To Documentationâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#go-to-documentation","content":"Have convenient links to the official Erlang/OTP documentation while hovering a function call. ","version":"Next","tagName":"h2"},{"title":"Diagnosticsâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#diagnostics","content":"In addition to errors and warnings coming directly from the Erlang compiler, ELP provides a number of diagnostics implemented using ELP's own analysis or external tools. ","version":"Next","tagName":"h2"},{"title":"EDocâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#edoc","content":"Show warnings and errors from compiling Erlang EDoc pages for the current module. ","version":"Next","tagName":"h3"},{"title":"Unsafe usage application environmentâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unsafe-usage-application-environment","content":"While it is technically possible to call application:get_env(Application, Key) from a module belonging to application A using the name of a different application B, this can sometimes represent a bad smell since it could lead to subtle bugs (e.g. application B not being included in the same release. ","version":"Next","tagName":"h3"},{"title":"Cross-node Evaluationâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#cross-node-evaluation","content":"Sometimes you want to prevent direct RPC calls to different nodes. ","version":"Next","tagName":"h3"},{"title":"Dependent Headerâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#dependent-header","content":"Return a warning if a header file is not self-contained. ","version":"Next","tagName":"h3"},{"title":"Deprecated Functionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#deprecated-function","content":"Similarly to XRef, show a warning if you are invoking a deprecated function. Deprecated functions can either be specified using the -deprecated attribute or via code. When deprecated functions are specified via code, extra information can be included, such as: A severityA descriptive messageA link to external documentation ","version":"Next","tagName":"h3"},{"title":"Effect Free Statementâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#effect-free-statement","content":"Return a diagnostic if a statement is just a literal or a variable. ","version":"Next","tagName":"h3"},{"title":"Head Mismatchâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#head-mismatch","content":"Find mismatches between the clauses of a function declaration. ","version":"Next","tagName":"h3"},{"title":"Missing warn_missing_spec compiler attributeâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#missing-warn_missing_spec-compiler-attribute","content":"Return a warning if a the file does not contain a -compile(warn_missing_spec). or -compile(warn_missing_spec_all). compiler attribute. ","version":"Next","tagName":"h3"},{"title":"Mispelled Attributeâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#mispelled-attribute","content":"Spot attributes with names similar to known attributes. ","version":"Next","tagName":"h3"},{"title":"Module Mismatchâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#module-mismatch","content":"Return an error if the module name does not correspond to the filename. ","version":"Next","tagName":"h3"},{"title":"Mutable Variableâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#mutable-variable","content":"Detect instances for the OTP mutable variable bug. It works by looking for a chain of match expressions where the constituent elements are already bound. E.g.: test() -&gt; Zero = 0, One = 1, Result = One = Zero, ^^^^^^^^^^^^^^^^^^^  ","version":"Next","tagName":"h3"},{"title":"Redundant Assignmentâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#redundant-assignment","content":"Check for redundant assignments before returning. ","version":"Next","tagName":"h3"},{"title":"No-op Callâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#no-op-call","content":"Warn if a function representing a no-op is invoked. ","version":"Next","tagName":"h3"},{"title":"Trivial Matchâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#trivial-match","content":"Return a diagnostic if a match will trivially always succeed. ","version":"Next","tagName":"h3"},{"title":"Unreachable Test Caseâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unreachable-test-case","content":"In a Common Test suite, tests are defined via a callback function: all/0. Tests can also be grouped together and groups definitions are provided via an additional callback function: groups/0. A test case is deemed unreachable if: A corresponding function with arity 1 existsThe function is exportedThe function is not one of the Common Test callback functionsThe function is not reachable via the all/0 and groups/0 functions ","version":"Next","tagName":"h3"},{"title":"Unused Function Argumentâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unused-function-argument","content":"Warn about arguments passed through functions but never used. ","version":"Next","tagName":"h3"},{"title":"Unused Includeâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unused-include","content":"Warn about an -include statement from which nothing is used. ","version":"Next","tagName":"h3"},{"title":"Unused Macroâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unused-macro","content":"Warn about macros defined in modules (not in header files), but never used. ","version":"Next","tagName":"h3"},{"title":"Unused Record Fieldsâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#unused-record-fields","content":"Warn about record fields which are never used. ","version":"Next","tagName":"h3"},{"title":"Quick Fixes (Assists)â€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#quick-fixes-assists","content":"","version":"Next","tagName":"h2"},{"title":"Add EDocâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#add-edoc","content":"Add a stub for EDoc documentation if not present. ","version":"Next","tagName":"h3"},{"title":"Add Format tagâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#add-format-tag","content":"Add the % @format pragma to opt-in formatting. ","version":"Next","tagName":"h3"},{"title":"Add Implementationâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#add-implementation","content":"Given a -spec attribute, provide a stub for the actual function if not present. ","version":"Next","tagName":"h3"},{"title":"Add Specâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#add-spec","content":"Given a function, provide a stub for the -spec attribute for such a function. ","version":"Next","tagName":"h3"},{"title":"Implement Behaviour Callbacksâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#implement-behaviour-callbacks","content":"Provide stubs for the un-implemented behaviour callbacks. ","version":"Next","tagName":"h3"},{"title":"Refactoringâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#refactoring","content":"ELP contains built-in capabilities for analyzing and refactoring Erlang code. ","version":"Next","tagName":"h2"},{"title":"Extract Functionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#extract-function","content":"Extract the selected expression(s) into a separate function and invoke it. ","version":"Next","tagName":"h3"},{"title":"Inline Functionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#inline-function","content":"Reverse of Extract Function. Given a function, replace all invokations with the body of the function. ","version":"Next","tagName":"h3"},{"title":"Create Functionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#create-function","content":"Add a new function. ","version":"Next","tagName":"h3"},{"title":"Delete Functionâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#delete-function","content":"Remove the entire function. ","version":"Next","tagName":"h3"},{"title":"Extract Variableâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#extract-variable","content":"","version":"Next","tagName":"h3"},{"title":"Ignore Variableâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#ignore-variable","content":"Prepend the variable name with a _ (underscore). ","version":"Next","tagName":"h3"},{"title":"Inline Variableâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#inline-variable","content":"Replace a variable with the RHS (right-hand-side) of a previous assignment. ","version":"Next","tagName":"h3"},{"title":"Bump Variablesâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#bump-variables","content":"Given how variables are immutable in Erlang, it is sometimes common to see patterns such as: handle_request(Request0) -&gt; Request1 = first_do(Request0), Request2 = then_do(Request1), Request3 = then_do(Request2), [...]  This refactoring allows selecting one of the instances and bump all instances afterwars. ","version":"Next","tagName":"h3"},{"title":"Flip Around Separatorâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#flip-around-separator","content":"Given two elements surrounding a separator, flip them. It can be used, for example, to flip the order of two function arguments around a comma. ","version":"Next","tagName":"h3"},{"title":"Test Runnerâ€‹","type":1,"pageTitle":"Feature Gallery","url":"/erlang-language-platform/docs/feature-gallery/#test-runner","content":"Run/Debug Common Test test-cases or an entire test suite via convenient code lenses. Support Common Test groups. ","version":"Next","tagName":"h2"}]