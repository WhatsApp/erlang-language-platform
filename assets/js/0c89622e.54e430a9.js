"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[3622],{15680:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>l});var n=r(96540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){return function(t){var r=u(t.components);return n.createElement(e,a({},t,{components:r}))}},u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=u(r),d=o,m=l["".concat(i,".").concat(d)]||l[d]||f[d]||a;return r?n.createElement(m,c(c({ref:t},s),{},{components:r})):n.createElement(m,c({ref:t},s))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[m]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},51871:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(58168),o=(r(96540),r(15680));const a={sidebar_position:4},i="Custom Project",c={unversionedId:"get-started/configure-project/custom-project",id:"get-started/configure-project/custom-project",title:"Custom Project",description:"If your project is not using rebar3 or buck2 as a build system, you can still configure ELP to load the project configuration from  a JSON file. This section describes the format of such a file.",source:"@site/docs/get-started/configure-project/custom-project.md",sourceDirName:"get-started/configure-project",slug:"/get-started/configure-project/custom-project",permalink:"/erlang-language-platform/docs/get-started/configure-project/custom-project",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"rebar3",permalink:"/erlang-language-platform/docs/get-started/configure-project/rebar3"},next:{title:"The .elp.toml Configuration File",permalink:"/erlang-language-platform/docs/get-started/configure-project/elp-toml"}},p={},s=[{value:"The <code>build_info.json</code> format",id:"the-build_infojson-format",level:3}],l={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.mdx)(u,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"custom-project"},"Custom Project"),(0,o.mdx)("p",null,"If your project is not using ",(0,o.mdx)("inlineCode",{parentName:"p"},"rebar3")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2")," as a build system, you can still ",(0,o.mdx)("a",{parentName:"p",href:"/erlang-language-platform/docs/get-started/configure-project/elp-toml#empty-section"},"configure ELP to load the project configuration from  a JSON file"),". This section describes the format of such a file."),(0,o.mdx)("h3",{id:"the-build_infojson-format"},"The ",(0,o.mdx)("inlineCode",{parentName:"h3"},"build_info.json")," format"),(0,o.mdx)("admonition",{type:"tip"},(0,o.mdx)("p",{parentName:"admonition"},"You can generate an example to customize for your own configuration by using the following command on a configured ",(0,o.mdx)("inlineCode",{parentName:"p"},"rebar3")," project, in the directory where the ",(0,o.mdx)("inlineCode",{parentName:"p"},"rebar.config")," file exists (requires the ",(0,o.mdx)("a",{parentName:"p",href:"/erlang-language-platform/docs/get-started/configure-project/rebar3#install-the-rebar3-build-info-plugin"},"build_info")," plugin)."),(0,o.mdx)("pre",{parentName:"admonition"},(0,o.mdx)("code",{parentName:"pre"},"elp build-info --project . --json --to build_info.json\n"))),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},".json")," file should be structured in this way:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'{\n  "apps": [app list],\n  "deps": [app list],      // 3rd party dependencies (not type-checked), defaults to []\n}\n')),(0,o.mdx)("p",null,"where an ",(0,o.mdx)("inlineCode",{parentName:"p"},"app")," is a map structured as such:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'{\n  "name": "app_name",\n  "dir": "path/to/app",                         // Relative to project root\n  "src_dirs": ["path/to/src", ...],             // Relative to app dir, defaults to ["src"]\n  "extra_src_dirs": ["path/to/extra_src", ...], // Relative to app dir, defaults to []\n  "ebin": "path/to/ebin",                       // Relative to app dir, defaults to "ebin"\n  "include_dirs": ["include", ...],             // Relative to app dir, defaults to []\n  "macros": ["MACRO", ...],                     // Defaults to []\n}\n')))}d.isMDXComponent=!0}}]);