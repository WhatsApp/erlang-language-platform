"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[5843],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>b,useMDXComponents:()=>m,withMDXComponents:()=>p});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){return function(t){var n=m(t.components);return r.createElement(e,i({},t,{components:n}))}},m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=m(n),u=a,c=p["".concat(o,".").concat(u)]||p[u]||f[u]||i;return n?r.createElement(c,l(l({ref:t},s),{},{components:n})):r.createElement(c,l({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},70091:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:4},o="Project Discovery and Configuration",l={unversionedId:"get-started/configuration",id:"get-started/configuration",title:"Project Discovery and Configuration",description:"When used as a language server (via the elp server command), ELP attempts to automatically discover project configuration when you first open a file.",source:"@site/docs/get-started/configuration.md",sourceDirName:"get-started",slug:"/get-started/configuration",permalink:"/erlang-language-platform/docs/get-started/configuration",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Emacs",permalink:"/erlang-language-platform/docs/get-started/emacs"},next:{title:"Feature Gallery",permalink:"/erlang-language-platform/docs/feature-gallery"}},d={},s=[{value:".elp.toml",id:"elptoml",level:2},{value:".elp.toml build_info",id:"elptoml-build_info",level:3},{value:".elp.toml eqwalizer",id:"elptoml-eqwalizer",level:3},{value:".elp.toml buck",id:"elptoml-buck",level:3},{value:".elp.toml rebar",id:"elptoml-rebar",level:3},{value:"Rebar",id:"rebar",level:2},{value:"build_info.json",id:"build_infojson",level:2},{value:"Last resort discovery",id:"last-resort-discovery",level:2}],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.mdx)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"project-discovery-and-configuration"},"Project Discovery and Configuration"),(0,a.mdx)("p",null,"When used as a language server (via the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp server")," command), ELP attempts to automatically discover project configuration when you first open a file."),(0,a.mdx)("p",null,"It does this by searching upward from the file directory until it finds one of"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},".elp.toml")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"rebar.config")," or ",(0,a.mdx)("inlineCode",{parentName:"li"},"rebar.config.script")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"build_info.json"))),(0,a.mdx)("p",null,"in that order. Processing of each is described below."),(0,a.mdx)("h2",{id:"elptoml"},".elp.toml"),(0,a.mdx)("p",null,"This file is used as an absolute marker for the root of an ELP project.\nIf one is found, it will stop further upward searching for alternative configuration."),(0,a.mdx)("p",null,"It contains overall configuration for ELP, which is minimal at this stage."),(0,a.mdx)("p",null,"If the configuration, described below, has enough to load the project, this is used. Otherwise the rest of discovery takes place, but restricted to this directory only."),(0,a.mdx)("p",null,"Here is an example of a full ",(0,a.mdx)("inlineCode",{parentName:"p"},".elp.toml")," file. all sections are optional, an empty one can be used to mark the root of a project.  The sections in it are described below."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-toml"},'build_info = my_hand_crafted_build_info.json\n\n[eqwalizer]\nenable_all = true\n\n[buck]\nenabled = false\n\n[rebar]\nprofile = "test"\n')),(0,a.mdx)("h3",{id:"elptoml-build_info"},".elp.toml build_info"),(0,a.mdx)("p",null,"This gives a path to a JSON file describing the project. This is only honoured if ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck.enabled")," is ",(0,a.mdx)("inlineCode",{parentName:"p"},"false")," or missing. The format is described below in ",(0,a.mdx)("a",{parentName:"p",href:"#build_infojson"},"build_info.json")),(0,a.mdx)("h3",{id:"elptoml-eqwalizer"},".elp.toml eqwalizer"),(0,a.mdx)("p",null,"By default we enable eqwalizer on all non-test modules. It is also disabled for modules having ",(0,a.mdx)("inlineCode",{parentName:"p"},"@generated")," anywhere in their first 2000 characters. This can be overriden per module as follows"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"-eqwalizer(ignore).")," attribute opts module out unconditionally"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"-typing([eqwalizer]).")," attribute opts module in unconditionally, including in test modules")),(0,a.mdx)("p",null,"Putting ",(0,a.mdx)("inlineCode",{parentName:"p"},"enable_all = false")," in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"[eqwalizer]")," section disables it for\nall modules by default, but still honours the module-specific overrides listed above."),(0,a.mdx)("h3",{id:"elptoml-buck"},".elp.toml buck"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"[buck]")," section is used to control loading a project that is built using ",(0,a.mdx)("a",{parentName:"p",href:"https://buck2.build/"},"buck2"),". It is used internally at Meta, and has Erlang support built in. See ",(0,a.mdx)("a",{parentName:"p",href:"https://youtu.be/4ALgsBqNBhQ"},"this presentation")," for details."),(0,a.mdx)("admonition",{type:"note"},(0,a.mdx)("p",{parentName:"admonition"},"Up to and including the ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/WhatsApp/erlang-language-platform/releases/tag/2024-02-07"},"2024-02-07")," release, the github version is not built with buck2 support enabled. This will change soon, once we tweak the tests.")),(0,a.mdx)("h3",{id:"elptoml-rebar"},".elp.toml rebar"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"[rebar]")," section is used to specify the profile to be used by rebar, if the project loads via rebar.  If left out, and a rebar project is loaded, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"test")," profile will be used as default."),(0,a.mdx)("p",null,"Note: this section is only consulted if rebar project loading takes place, described in the next section."),(0,a.mdx)("h2",{id:"rebar"},"Rebar"),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar.config")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar.config.script")," are found, ELP runs"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3 as test help build_info")),(0,a.mdx)("p",null,"to check that rebar3 is in the path and the ",(0,a.mdx)("inlineCode",{parentName:"p"},"build_info")," plugin is installed in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar.config")," file."),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"If you are expecting a rebar project to be found, make sure this command succeeds, and that ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3")," is in the path seen by the ELP server when it launches.")),(0,a.mdx)("p",null,"If so, it loads a the project based on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"build_info")," output."),(0,a.mdx)("h2",{id:"build_infojson"},"build_info.json"),(0,a.mdx)("p",null,"If the above checks fail, it looks for a file called ",(0,a.mdx)("inlineCode",{parentName:"p"},"build_info.json"),", which contains the same information as output by the ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3")," ",(0,a.mdx)("inlineCode",{parentName:"p"},"build_info")," plugin, just in JSON format."),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"You can generate an example to customize for your own configuration by using the following command on a configured ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3")," project, in the directory where the ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar.config")," file exists."),(0,a.mdx)("pre",{parentName:"admonition"},(0,a.mdx)("code",{parentName:"pre"},"elp build-info --project . --json --to build_info.json\n"))),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},".json")," file should be structured in this way:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'{\n  "apps": [app list],\n  "deps": [app list],      // 3rd party dependencies (not type-checked), defaults to []\n}\n')),(0,a.mdx)("p",null,"where an ",(0,a.mdx)("inlineCode",{parentName:"p"},"app")," is a map structured as such:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'{\n  "name": "app_name",\n  "dir": "path/to/app",                         // Relative to project root\n  "src_dirs": ["path/to/src", ...],             // Relative to app dir, defaults to ["src"]\n  "extra_src_dirs": ["path/to/extra_src", ...], // Relative to app dir, defaults to []\n  "ebin": "path/to/ebin",                       // Relative to app dir, defaults to "ebin"\n  "include_dirs": ["include", ...],             // Relative to app dir, defaults to []\n  "macros": ["MACRO", ...],                     // Defaults to []\n}\n')),(0,a.mdx)("h2",{id:"last-resort-discovery"},"Last resort discovery"),(0,a.mdx)("p",null,"Given the discovery process is kicked off when your LSP client opens an erlang file, it starts at that location and searches upwards. If it is in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"src")," directory, it assumes you are in an erlang app with the parent of ",(0,a.mdx)("inlineCode",{parentName:"p"},"src"),' as its name. It is pretty basic, and does not (currently) look for the other normal directories, such as "include" or "test", nor other likely application directories.'))}u.isMDXComponent=!0}}]);