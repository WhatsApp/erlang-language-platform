"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[7207],{29976:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"erlang-error-index/w/W0032","title":"W0032 - Maps Find Function Rather Than Syntax","description":"Warning","source":"@site/docs/erlang-error-index/w/W0032.md","sourceDirName":"erlang-error-index/w","slug":"/erlang-error-index/w/W0032","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0032","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":32,"frontMatter":{"sidebar_position":32},"sidebar":"tutorialSidebar","previous":{"title":"W0031 - Maps Update Function Rather Than Syntax","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0031"},"next":{"title":"W0033 - Lists Zip With Seq Rather Than Enumerate","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0033"}}');var r=t(74848),i=t(28453);const o={sidebar_position:32},s="W0032 - Maps Find Function Rather Than Syntax",d={},c=[{value:"Warning",id:"warning",level:2},{value:"Explanation",id:"explanation",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"w0032---maps-find-function-rather-than-syntax",children:"W0032 - Maps Find Function Rather Than Syntax"})}),"\n",(0,r.jsx)(n.h2,{id:"warning",children:"Warning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-erlang",children:"fn(Key, Found, NotFound, Map) ->\n    case maps:find(Key,Map) of\n        {ok, V} -> Found;\n        error -> NotFound\n    end.\n %% ^^^^^^^^^^^^^^^^^^^^^^^^^^^\ud83d\udca1 warning: Unnecessary allocation of result tuple when the key is found.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,r.jsxs)(n.p,{children:["The warning message indicates that a map is being queried by key using the\n",(0,r.jsx)(n.code,{children:"maps:find/2"})," function call rather than the dedicated lookup syntax."]}),"\n",(0,r.jsxs)(n.p,{children:["Whilst this will correctly query for the value for the given key in the map,\nit is not considered idiomatic, and may be less efficient than using the map\nlookup syntax directly since it constructs an ",(0,r.jsx)(n.code,{children:"{ok,Value}"})," tuple if they key\nis found."]}),"\n",(0,r.jsxs)(n.p,{children:["To fix the issue, use the built-in ",(0,r.jsx)(n.code,{children:"#{Key := Value}"})," pattern syntax to match\nagainst the ",(0,r.jsx)(n.code,{children:"Map"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-erlang",children:"fn(Key, Found, NotFound, Map) ->\n    case Map of\n        #{Key := Value} -> Found;\n        error -> NotFound\n    end.\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);