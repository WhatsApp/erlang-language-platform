"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[2737],{15680:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>c});var n=t(96540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(){return a=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},a.apply(this,arguments)}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){return function(r){var t=u(r.components);return n.createElement(e,a({},r,{components:t}))}},u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},d=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=o,m=c["".concat(i,".").concat(d)]||c[d]||f[d]||a;return t?n.createElement(m,p(p({ref:r},s),{},{components:t})):n.createElement(m,p({ref:r},s))}));function b(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[m]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},36720:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var n=t(58168),o=(t(96540),t(15680));const a={sidebar_position:-1},i="About",p={unversionedId:"erlang-error-index/p/about",id:"erlang-error-index/p/about",title:"About",description:"The P namespace is reserved for error codes emitted by the Erlang parser erlparse.",source:"@site/docs/erlang-error-index/p/about.md",sourceDirName:"erlang-error-index/p",slug:"/erlang-error-index/p/about",permalink:"/erlang-language-platform/docs/erlang-error-index/p/about",draft:!1,tags:[],version:"current",sidebarPosition:-1,frontMatter:{sidebar_position:-1},sidebar:"tutorialSidebar",previous:{title:"O0039 - Tag Not Recognized",permalink:"/erlang-language-platform/docs/erlang-error-index/o/O0039"},next:{title:"P1700 - Head Mismatch",permalink:"/erlang-language-platform/docs/erlang-error-index/p/P1700"}},l={},s=[],c={toc:s},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.mdx)(u,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"about"},"About"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"P")," namespace is reserved for error codes emitted by the Erlang parser ",(0,o.mdx)("a",{parentName:"p",href:"https://www.erlang.org/doc/man/erl_parse"},"erl_parse"),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"erl_parse")," module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms."),(0,o.mdx)("p",null,"For more information about ",(0,o.mdx)("inlineCode",{parentName:"p"},"erl_parse")," please refer to ",(0,o.mdx)("a",{parentName:"p",href:"https://www.erlang.org/doc/man/erl_parse"},"the official documentation"),"."))}d.isMDXComponent=!0}}]);