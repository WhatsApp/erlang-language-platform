"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[9656],{98638:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"erlang-error-index/l/L1253","title":"L1253 - Redefine record","description":"Error","source":"@site/docs/erlang-error-index/l/L1253.md","sourceDirName":"erlang-error-index/l","slug":"/erlang-error-index/l/L1253","permalink":"/erlang-language-platform/docs/erlang-error-index/l/L1253","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":253,"frontMatter":{"sidebar_position":253},"sidebar":"tutorialSidebar","previous":{"title":"L1227 - Undefined Function","permalink":"/erlang-language-platform/docs/erlang-error-index/l/L1227"},"next":{"title":"L1309 - Missing function specification","permalink":"/erlang-language-platform/docs/erlang-error-index/l/L1309"}}');var i=r(74848),t=r(28453);const a={sidebar_position:253},d="L1253 - Redefine record",s={},l=[{value:"Error",id:"error",level:2},{value:"Explanation",id:"explanation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"l1253---redefine-record",children:"L1253 - Redefine record"})}),"\n",(0,i.jsx)(n.h2,{id:"error",children:"Error"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-erlang",children:"    -record(person, {name, age}).\n    -record(person, {name, age, city}).\n%%  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 error: record person already defined\n"})}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsx)(n.p,{children:"This error occurs when you attempt to define a record with the same name more\nthan once in the same module."}),"\n",(0,i.jsx)(n.p,{children:"Each record name must be unique within a module. If you need to modify a record\ndefinition, you should update the original definition rather than creating a new\none with the same name."}),"\n",(0,i.jsx)(n.p,{children:"To fix this error, either:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Remove the duplicate record definition"}),"\n",(0,i.jsx)(n.li,{children:"Rename one of the records to have a different name"}),"\n",(0,i.jsx)(n.li,{children:"Combine the field definitions into a single record definition"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-erlang",children:"%% Correct approach - single record definition\n-record(person, {name, age, city}).\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var o=r(96540);const i={},t=o.createContext(i);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);