"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[5306],{987:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"get-started/install","title":"Install ELP","description":"The easiest way to install to ELP is from binary. It is also","source":"@site/docs/get-started/install.md","sourceDirName":"get-started","slug":"/get-started/install","permalink":"/erlang-language-platform/docs/get-started/install","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Get Started","permalink":"/erlang-language-platform/docs/get-started/"},"next":{"title":"The ELP CLI","permalink":"/erlang-language-platform/docs/get-started/cli"}}');var s=r(74848),a=r(28453);const l={sidebar_position:2},i="Install ELP",o={},c=[{value:"From Binary",id:"from-binary",level:2},{value:"From Source",id:"from-source",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"install-elp",children:"Install ELP"})}),"\n",(0,s.jsxs)(n.p,{children:["The easiest way to install to ELP is ",(0,s.jsx)(n.a,{href:"#from-binary",children:"from binary"}),". It is also\npossible to compile it ",(0,s.jsx)(n.a,{href:"#from-source",children:"from source"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"from-binary",children:"From Binary"}),"\n",(0,s.jsxs)(n.p,{children:["Visit our\n",(0,s.jsx)(n.a,{href:"https://github.com/WhatsApp/erlang-language-platform/releases",children:"releases"})," page\nand download the ",(0,s.jsx)(n.code,{children:"elp"})," tarball for the latest releases."]}),"\n",(0,s.jsxs)(n.p,{children:["Packages are available in the ",(0,s.jsx)(n.em,{children:"Assets"})," section below each release. Each tarball\nname has the format:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"elp-[OS]-[ARCH]-[c]-otp-[OTP_VERSION].tar.gz\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pick the appropriate version according to your Operating System (OS),\nArchitecture (ARCH) and Erlang/OTP version (OTP_VERSION). For example, for my\nDarwin MacBook Pro where I have installed Erlang/OTP 25, I will pick:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Unsure about your architecture? Try the ",(0,s.jsx)(n.code,{children:"uname -a"})," command. Unsure about your\nErlang/OTP version? Try\n",(0,s.jsx)(n.code,{children:"erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Untar the package and place the ",(0,s.jsx)(n.code,{children:"elp"})," binary in a place visible by your `PATH``.\nFor example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cd ~/Downloads\ntar -xvzf elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\nmv elp ~/bin\nexport PATH=$PATH:~/bin\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Follow ",(0,s.jsx)(n.a,{href:"/erlang-language-platform/docs/get-started/cli#verify-elp-is-correctly-installed",children:"these steps"})," to verify ELP is\ncorrectly installed."]}),"\n",(0,s.jsx)(n.h2,{id:"from-source",children:"From Source"}),"\n",(0,s.jsx)(n.p,{children:"Clone the ELP repository, including submodules:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"git clone --recurse-submodules https://github.com/WhatsApp/erlang-language-platform.git\ncd erlang-language-platform\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enter the ",(0,s.jsx)(n.code,{children:"eqwalizer"})," submodule and build it. Notice the double ",(0,s.jsx)(n.code,{children:"eqwalizer"})," in\nthe ",(0,s.jsx)(n.code,{children:"pushd"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"pushd eqwalizer/eqwalizer\nsbt assembly\npopd\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Point the ",(0,s.jsx)(n.code,{children:"ELP_EQWALIZER_PATH"})," environment variable to the path of the produced ",(0,s.jsx)(n.code,{children:"eqwalizer.jar"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'export ELP_EQWALIZER_PATH=$(find "$(pwd)" -name eqwalizer.jar)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Point the ",(0,s.jsx)(n.code,{children:"EQWALIZER_DIR"})," environment variable to the path of the ",(0,s.jsx)(n.code,{children:"eqwalizer_support"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'export EQWALIZER_DIR=$(find "$(pwd)" -name eqwalizer_support)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now we can compile ELP:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo build --release\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The produced executable will be available in: ",(0,s.jsx)(n.code,{children:"target/release/elp"}),", so ensure it is included in your ",(0,s.jsx)(n.code,{children:"PATH"}),". E.g.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mkdir -p ~/bin\nmv target/release/elp ~/bin\nexport PATH=$PATH:~/bin\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(96540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);