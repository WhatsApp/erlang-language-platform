"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[5306],{15680:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>s,withMDXComponents:()=>d});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(){return l=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},l.apply(this,arguments)}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=n.createContext({}),d=function(e){return function(r){var t=s(r.components);return n.createElement(e,l({},r,{components:t}))}},s=function(e){var r=n.useContext(m),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(m.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},x=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,u=d["".concat(o,".").concat(c)]||d[c]||f[c]||l;return t?n.createElement(u,i(i({ref:r},m),{},{components:t})):n.createElement(u,i({ref:r},m))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=x;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var m=2;m<l;m++)o[m]=t[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}x.displayName="MDXCreateElement"},76994:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=t(58168),a=(t(96540),t(15680));const l={sidebar_position:2},o="Install ELP",i={unversionedId:"get-started/install",id:"get-started/install",title:"Install ELP",description:"The easiest way to install to ELP is from binary. It is also",source:"@site/docs/get-started/install.md",sourceDirName:"get-started",slug:"/get-started/install",permalink:"/erlang-language-platform/docs/get-started/install",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/erlang-language-platform/docs/get-started/"},next:{title:"The ELP CLI",permalink:"/erlang-language-platform/docs/get-started/cli"}},p={},m=[{value:"From Binary",id:"from-binary",level:2},{value:"From Source",id:"from-source",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Compile ELP",id:"compile-elp",level:3}],d={toc:m},s="wrapper";function c(e){let{components:r,...t}=e;return(0,a.mdx)(s,(0,n.A)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"install-elp"},"Install ELP"),(0,a.mdx)("p",null,"The easiest way to install to ELP is ",(0,a.mdx)("a",{parentName:"p",href:"#from-binary"},"from binary"),". It is also\npossible to compile it ",(0,a.mdx)("a",{parentName:"p",href:"#from-source"},"from source"),"."),(0,a.mdx)("h2",{id:"from-binary"},"From Binary"),(0,a.mdx)("p",null,"Visit our\n",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/WhatsApp/erlang-language-platform/releases"},"releases")," page\nand download the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp")," tarball for the latest releases."),(0,a.mdx)("p",null,"Packages are available in the ",(0,a.mdx)("em",{parentName:"p"},"Assets")," section below each release. Each tarball\nname has the format:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp-[OS]-[ARCH]-[c]-otp-[OTP_VERSION].tar.gz\n")),(0,a.mdx)("p",null,"Pick the appropriate version according to your Operating System (OS),\nArchitecture (ARCH) and Erlang/OTP version (OTP_VERSION). For example, for my\nDarwin MacBook Pro where I have installed Erlang/OTP 25, I will pick:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\n")),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"Unsure about your architecture? Try the ",(0,a.mdx)("inlineCode",{parentName:"p"},"uname -a")," command. Unsure about your\nErlang/OTP version? Try\n",(0,a.mdx)("inlineCode",{parentName:"p"},"erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell"))),(0,a.mdx)("p",null,"Untar the package and place the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp")," binary in a place visible by your `PATH``.\nFor example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"cd ~/Downloads\ntar -xvzf elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\nmv elp ~/bin\nexport PATH=$PATH:~/bin\n")),(0,a.mdx)("p",null,"Follow ",(0,a.mdx)("a",{parentName:"p",href:"/erlang-language-platform/docs/get-started/cli#verify-elp-is-correctly-installed"},"these steps")," to verify ELP is\ncorrectly installed."),(0,a.mdx)("h2",{id:"from-source"},"From Source"),(0,a.mdx)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.mdx)("p",null,"To be able to compile ELP from source, you need a copy of the\n",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/WhatsApp/eqwalizer"},"eqWAlizer")," typechecker for Erlang."),(0,a.mdx)("p",null,"Clone the eqWAlizer repository:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"git clone https://github.com/WhatsApp/eqwalizer.git\n")),(0,a.mdx)("p",null,"Enter the ",(0,a.mdx)("inlineCode",{parentName:"p"},"eqwalizer")," repository and build it. Notice the double ",(0,a.mdx)("inlineCode",{parentName:"p"},"eqwalizer")," in\nthe ",(0,a.mdx)("inlineCode",{parentName:"p"},"pushd")," command."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"pushd eqwalizer/eqwalizer\nsbt assembly\npopd\n")),(0,a.mdx)("p",null,"Get the path of the produced ",(0,a.mdx)("inlineCode",{parentName:"p"},"eqwalizer.jar")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"find . -name eqwalizer.jar | readlink -f\n")),(0,a.mdx)("p",null,"Point the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ELP_EQWALIZER_PATH")," environment variable to the path returned above:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"export ELP_EQWALIZER_PATH=/path/to/eqwalizer.jar\n")),(0,a.mdx)("h3",{id:"compile-elp"},"Compile ELP"),(0,a.mdx)("p",null,"Clone the ELP repository:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"git clone https://github.com/WhatsApp/erlang-language-platform.git\n")),(0,a.mdx)("p",null,"Enter the ELP repo and compile it:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"cd erlang-language-platform\ncargo build --release\n")),(0,a.mdx)("p",null,"The produced executable will be available in: ",(0,a.mdx)("inlineCode",{parentName:"p"},"target/release/elp"),", so ensure it is included in your ",(0,a.mdx)("inlineCode",{parentName:"p"},"PATH"),". E.g.:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"mkdir -p ~/bin\nmv target/releases/elp ~/bin\nexport PATH=$PATH:~/bin\n")))}c.isMDXComponent=!0}}]);