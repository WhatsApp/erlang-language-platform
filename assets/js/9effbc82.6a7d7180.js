"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[2786],{29866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"erlang-error-index/w/W0028","title":"W0028 - Unnecessary Flattening To Find Flat Length","description":"Error","source":"@site/docs/erlang-error-index/w/W0028.md","sourceDirName":"erlang-error-index/w","slug":"/erlang-error-index/w/W0028","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0028","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":28,"frontMatter":{"sidebar_position":28},"sidebar":"tutorialSidebar","previous":{"title":"W0027 - Record Tuple Match","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0027"},"next":{"title":"W0029 - Unnecessary Reversal To Find Last Element Of List","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0029"}}');var a=t(74848),s=t(28453);const i={sidebar_position:28},l="W0028 - Unnecessary Flattening To Find Flat Length",o={},c=[{value:"Error",id:"error",level:2},{value:"Explanation",id:"explanation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"w0028---unnecessary-flattening-to-find-flat-length",children:"W0028 - Unnecessary Flattening To Find Flat Length"})}),"\n",(0,a.jsx)(n.h2,{id:"error",children:"Error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-erlang",children:"main(NestedList) ->\n    length(lists:flatten(NestedList)).\n%%  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 warning: Unnecessary intermediate flat-list allocated.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,a.jsx)(n.p,{children:"The warning message indicates that a list is being unnecessarily flattened."}),"\n",(0,a.jsx)(n.p,{children:"Whilst this will correctly find the length of the flattened list, it is\nunnecessary to actually construct the flattened list to find that length."}),"\n",(0,a.jsxs)(n.p,{children:["To fix the issue, use the function ",(0,a.jsx)(n.code,{children:"lists:flatlength/1"})," to compute the\nflatlength without constructing an intermediate, flattened list:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-erlang",children:"main(NestedList) ->\n    lists:flatlength(NestedList).\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);