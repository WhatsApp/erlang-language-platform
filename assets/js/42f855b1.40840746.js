"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[1654],{16314:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"erlang-error-index/w/W0036","title":"W0036 - unnecessary Map From List Around Comprehension","description":"Warning","source":"@site/docs/erlang-error-index/w/W0036.md","sourceDirName":"erlang-error-index/w","slug":"/erlang-error-index/w/W0036","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0036","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":36,"frontMatter":{"sidebar_position":36},"sidebar":"tutorialSidebar","previous":{"title":"W0035 - Unnecessary Fold to Build Map","permalink":"/erlang-language-platform/docs/erlang-error-index/w/W0035"}}');var i=r(74848),t=r(28453);const a={sidebar_position:36},o="W0036 - unnecessary Map From List Around Comprehension",l={},c=[{value:"Warning",id:"warning",level:2},{value:"Explanation",id:"explanation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"w0036---unnecessary-map-from-list-around-comprehension",children:"W0036 - unnecessary Map From List Around Comprehension"})}),"\n",(0,i.jsx)(n.h2,{id:"warning",children:"Warning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-erlang",children:"fn(List) -> maps:from_list([{K + 1, V + 2} || {K,V} <- List]).\n%%          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Unnecessary intermediate list allocated.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsx)(n.p,{children:"The warning message indicates an unidiomatic and sub-optimal way to build a map\nfrom a list."}),"\n",(0,i.jsxs)(n.p,{children:["Whilst the comprehension and subsequent call to ",(0,i.jsx)(n.code,{children:"maps:from_list/1"})," will ultimately\nconstruct a map from the key-values pair in the given list, it is less\nefficient than it could be, since an intermediate list is created by the list\ncomprehension."]}),"\n",(0,i.jsx)(n.p,{children:"Using the map comprehension syntax is clearer and more performant."}),"\n",(0,i.jsxs)(n.p,{children:["To fix this warning, replace the list comprehension and ",(0,i.jsx)(n.code,{children:"maps:from_list/1"})," call\nwith a map comprehension:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-erlang",children:"main(List) ->\n    #{K + 1 => V + 2 || {K,V} <- List}.\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(96540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);