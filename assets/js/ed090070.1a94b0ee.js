"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[2176],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},l.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){return function(n){var t=m(n.components);return r.createElement(e,l({},n,{components:t}))}},m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=m(t),c=a,u=d["".concat(o,".").concat(c)]||d[c]||g[c]||l;return t?r.createElement(u,i(i({ref:n},s),{},{components:t})):r.createElement(u,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=h;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},13412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const l={sidebar_position:3},o="Emacs",i={unversionedId:"get-started/emacs",id:"get-started/emacs",title:"Emacs",description:"The ELP project can be used as a language server in the Emacs text editor via the lsp-mode LSP client.",source:"@site/docs/get-started/emacs.md",sourceDirName:"get-started",slug:"/get-started/emacs",permalink:"/erlang-language-platform/docs/get-started/emacs",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"VS Code",permalink:"/erlang-language-platform/docs/get-started/vscode"},next:{title:"Project Discovery and Configuration",permalink:"/erlang-language-platform/docs/get-started/configuration"}},p={},s=[{value:"Requirements",id:"requirements",level:2},{value:"<code>lsp-mode</code>",id:"lsp-mode",level:3},{value:"<code>rebar3</code> <code>build-info</code> plugin",id:"rebar3-build-info-plugin",level:3},{value:"Install ELP",id:"install-elp",level:2},{value:"From Binary",id:"from-binary",level:3},{value:"Verify <code>elp</code> is correctly installed",id:"verify-elp-is-correctly-installed",level:2},{value:"Configure Emacs",id:"configure-emacs",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"The following servers support current file but do not have automatic installation",id:"the-following-servers-support-current-file-but-do-not-have-automatic-installation",level:4},{value:"build-info plugin was not installed",id:"build-info-plugin-was-not-installed",level:4},{value:"Support",id:"support",level:2}],d={toc:s},m="wrapper";function c(e){let{components:n,...t}=e;return(0,a.mdx)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"emacs"},"Emacs"),(0,a.mdx)("p",null,"The ELP project can be used as a ",(0,a.mdx)("a",{parentName:"p",href:"https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/"},"language server")," in the Emacs text editor via the ",(0,a.mdx)("a",{parentName:"p",href:"https://emacs-lsp.github.io/lsp-mode/"},"lsp-mode")," LSP client."),(0,a.mdx)("h2",{id:"requirements"},"Requirements"),(0,a.mdx)("h3",{id:"lsp-mode"},(0,a.mdx)("inlineCode",{parentName:"h3"},"lsp-mode")),(0,a.mdx)("p",null,"First, you need the ",(0,a.mdx)("inlineCode",{parentName:"p"},"lsp-mode")," package, which is an Emacs client for LSP servers. You can follow ",(0,a.mdx)("a",{parentName:"p",href:"https://emacs-lsp.github.io/lsp-mode/page/installation/"},"these instructions")," to install it."),(0,a.mdx)("h3",{id:"rebar3-build-info-plugin"},(0,a.mdx)("inlineCode",{parentName:"h3"},"rebar3")," ",(0,a.mdx)("inlineCode",{parentName:"h3"},"build-info")," plugin"),(0,a.mdx)("p",null,"This plugin is required by ",(0,a.mdx)("inlineCode",{parentName:"p"},"ELP")," to auto-discover the structure of ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3")," based projects. To enable it globally, add the following lines to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"~/.config/rebar3/rebar.config")," file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-erlang"},'{project_plugins, [\n  {eqwalizer_rebar3,\n    {git_subdir,\n        "https://github.com/whatsapp/eqwalizer.git",\n        {branch, "main"},\n        "eqwalizer_rebar3"}}\n]}.\n')),(0,a.mdx)("h2",{id:"install-elp"},"Install ELP"),(0,a.mdx)("h3",{id:"from-binary"},"From Binary"),(0,a.mdx)("p",null,"Visit our ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/WhatsApp/erlang-language-platform/releases"},"releases")," page and download the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp")," tarball for the latest releases."),(0,a.mdx)("p",null,"Packages are available in the ",(0,a.mdx)("em",{parentName:"p"},"Assets")," section below each release. Each tarball name has the format:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp-[OS]-[ARCH]-[c]-otp-[OTP_VERSION].tar.gz\n")),(0,a.mdx)("p",null,"Pick the appropriate version according to your Operating System (OS), Architecture (ARCH) and Erlang/OTP version (OTP_VERSION). For example, for my Darwin MacBook Pro where I have installed Erlang/OTP 25, I will pick:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\n")),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"Unsure about your architecture? Try the ",(0,a.mdx)("inlineCode",{parentName:"p"},"uname -a")," command.\nUnsure about your Erlang/OTP version? Try ",(0,a.mdx)("inlineCode",{parentName:"p"},"erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell"))),(0,a.mdx)("p",null,"Untar the package and place the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp")," binary in a place visible by your `PATH``. For example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"cd ~/Downloads\ntar -xvzf elp-macos-x86_64-apple-darwin-otp-25.3.tar.gz\nmv elp ~/bin\nexport PATH=$PATH:~/bin\n")),(0,a.mdx)("h2",{id:"verify-elp-is-correctly-installed"},"Verify ",(0,a.mdx)("inlineCode",{parentName:"h2"},"elp")," is correctly installed"),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},'On Mac you may get a warning, saying "elp cannot be opened because the developer cannot be verified". To solve this, go to ',(0,a.mdx)("inlineCode",{parentName:"p"},"Preferences -> Security and Privacy -> General")," and add an exception for ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp"),". Alternatively, you can build the project from source (see below)")),(0,a.mdx)("p",null,"Open a terminal and run:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp version\n")),(0,a.mdx)("p",null,"You should see something like:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"elp 1.1.0+build-2024-01-18\n")),(0,a.mdx)("h2",{id:"configure-emacs"},"Configure Emacs"),(0,a.mdx)("p",null,"Add the following to your emacs ",(0,a.mdx)("inlineCode",{parentName:"p"},".emacs")," file or equivalent."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-elisp"},"(use-package lsp-mode\n\n  :config\n  ;; Enable LSP automatically for Erlang files\n  (add-hook 'erlang-mode-hook #'lsp)\n\n  ;; ELP, added as priority 0 (> -1) so takes priority over the built-in one\n  (lsp-register-client\n   (make-lsp-client :new-connection (lsp-stdio-connection '(\"elp\" \"server\"))\n                    :major-modes '(erlang-mode)\n                    :priority 0\n                    :server-id 'erlang-language-platform))\n  )\n")),(0,a.mdx)("p",null,"For a list of available configuration option, please refer to ",(0,a.mdx)("a",{parentName:"p",href:"https://emacs-lsp.github.io/lsp-mode/page/lsp-erlang-elp/"},"this page")," and to the ",(0,a.mdx)("a",{parentName:"p",href:"https://emacs-lsp.github.io/lsp-mode/page/settings/mode/"},(0,a.mdx)("inlineCode",{parentName:"a"},"lsp-mode")," settings documentation"),"."),(0,a.mdx)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.mdx)("h4",{id:"the-following-servers-support-current-file-but-do-not-have-automatic-installation"},"The following servers support current file but do not have automatic installation"),(0,a.mdx)("p",null,"Ensure that the ",(0,a.mdx)("inlineCode",{parentName:"p"},"elp")," executable is available in your ",(0,a.mdx)("inlineCode",{parentName:"p"},"PATH")," via Emacs. A workaround is:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-elisp"},";; Ensure your Emacs environment looks like your user's shell one\n(package-require 'exec-path-from-shell)\n(exec-path-from-shell-initialize)\n")),(0,a.mdx)("h4",{id:"build-info-plugin-was-not-installed"},"build-info plugin was not installed"),(0,a.mdx)("p",null,"You need the ",(0,a.mdx)("inlineCode",{parentName:"p"},"build-info")," plugin for ",(0,a.mdx)("inlineCode",{parentName:"p"},"rebar3")," installed. See ",(0,a.mdx)("a",{parentName:"p",href:"#rebar3-build-info-plugin"},"how to install it"),"."),(0,a.mdx)("h2",{id:"support"},"Support"),(0,a.mdx)("p",null,"Things did not work as expected? We are ready to help in the ",(0,a.mdx)("a",{parentName:"p",href:"https://erlanger.slack.com/archives/C05KJHDJJUF"},"#elp")," Slack channel."))}c.isMDXComponent=!0}}]);